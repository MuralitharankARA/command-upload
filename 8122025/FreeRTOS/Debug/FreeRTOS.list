
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  20000010  08005b50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001084  08005b50  00021084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b400  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d2  00000000  00000000  0003b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e17  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e39  00000000  00000000  00069d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4d7  00000000  00000000  00080b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  0017d08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a40 	.word	0x08005a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005a40 	.word	0x08005a40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f8dd 	bl	8000692 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	200f      	movs	r0, #15
 80004da:	f005 f979 	bl	80057d0 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f005 f8e3 	bl	80056b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_IncTick+0x20>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_IncTick+0x24>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4413      	add	r3, r2
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_IncTick+0x24>)
 800050a:	6013      	str	r3, [r2, #0]
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000004 	.word	0x20000004
 800051c:	20000f90 	.word	0x20000f90

08000520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return uwTick;
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <HAL_GetTick+0x14>)
 8000526:	681b      	ldr	r3, [r3, #0]
}
 8000528:	4618      	mov	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000f90 	.word	0x20000f90

08000538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f003 0307 	and.w	r3, r3, #7
 8000546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000554:	4013      	ands	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	60d3      	str	r3, [r2, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <__NVIC_GetPriorityGrouping+0x18>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	f003 0307 	and.w	r3, r3, #7
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0a      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <__NVIC_SetPriority+0x4c>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000600:	e00a      	b.n	8000618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <__NVIC_SetPriority+0x50>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	3b04      	subs	r3, #4
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	440b      	add	r3, r1
 8000616:	761a      	strb	r2, [r3, #24]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062c:	b480      	push	{r7}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f1c3 0307 	rsb	r3, r3, #7
 8000646:	2b04      	cmp	r3, #4
 8000648:	bf28      	it	cs
 800064a:	2304      	movcs	r3, #4
 800064c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3304      	adds	r3, #4
 8000652:	2b06      	cmp	r3, #6
 8000654:	d902      	bls.n	800065c <NVIC_EncodePriority+0x30>
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3b03      	subs	r3, #3
 800065a:	e000      	b.n	800065e <NVIC_EncodePriority+0x32>
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	f04f 32ff 	mov.w	r2, #4294967295
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43da      	mvns	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	401a      	ands	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000674:	f04f 31ff 	mov.w	r1, #4294967295
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43d9      	mvns	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	4313      	orrs	r3, r2
         );
}
 8000686:	4618      	mov	r0, r3
 8000688:	3724      	adds	r7, #36	; 0x24
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff4c 	bl	8000538 <__NVIC_SetPriorityGrouping>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006ba:	f7ff ff61 	bl	8000580 <__NVIC_GetPriorityGrouping>
 80006be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	6978      	ldr	r0, [r7, #20]
 80006c6:	f7ff ffb1 	bl	800062c <NVIC_EncodePriority>
 80006ca:	4602      	mov	r2, r0
 80006cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff80 	bl	80005d8 <__NVIC_SetPriority>
}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff54 	bl	800059c <__NVIC_EnableIRQ>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b02      	cmp	r3, #2
 8000712:	d008      	beq.n	8000726 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2204      	movs	r2, #4
 8000718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e022      	b.n	800076c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f022 020e 	bic.w	r2, r2, #14
 8000734:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0201 	bic.w	r2, r2, #1
 8000744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f003 021c 	and.w	r2, r3, #28
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f202 	lsl.w	r2, r1, r2
 8000758:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b02      	cmp	r3, #2
 800078e:	d005      	beq.n	800079c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2204      	movs	r2, #4
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	e029      	b.n	80007f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 020e 	bic.w	r2, r2, #14
 80007aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 0201 	bic.w	r2, r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c0:	f003 021c 	and.w	r2, r3, #28
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	2101      	movs	r1, #1
 80007ca:	fa01 f202 	lsl.w	r2, r1, r2
 80007ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	4798      	blx	r3
    }
  }
  return status;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e17f      	b.n	8000b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 8171 	beq.w	8000b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f003 0303 	and.w	r3, r3, #3
 800082c:	2b01      	cmp	r3, #1
 800082e:	d005      	beq.n	800083c <HAL_GPIO_Init+0x40>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	2b02      	cmp	r3, #2
 800083a:	d130      	bne.n	800089e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2203      	movs	r2, #3
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000872:	2201      	movs	r2, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	091b      	lsrs	r3, r3, #4
 8000888:	f003 0201 	and.w	r2, r3, #1
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d118      	bne.n	80008dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008b0:	2201      	movs	r2, #1
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f003 0201 	and.w	r2, r3, #1
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d017      	beq.n	8000918 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b02      	cmp	r3, #2
 8000922:	d123      	bne.n	800096c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	220f      	movs	r2, #15
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	6939      	ldr	r1, [r7, #16]
 8000968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0203 	and.w	r2, r3, #3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80ac 	beq.w	8000b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a5e      	ldr	r2, [pc, #376]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c6:	4a5a      	ldr	r2, [pc, #360]	; (8000b30 <HAL_GPIO_Init+0x334>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f0:	d025      	beq.n	8000a3e <HAL_GPIO_Init+0x242>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x338>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01f      	beq.n	8000a3a <HAL_GPIO_Init+0x23e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x33c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x23a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x340>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x236>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_GPIO_Init+0x344>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x232>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <HAL_GPIO_Init+0x348>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x22e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x22a>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a50:	4937      	ldr	r1, [pc, #220]	; (8000b30 <HAL_GPIO_Init+0x334>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a82:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aac:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f47f ae78 	bne.w	800080c <HAL_GPIO_Init+0x10>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	48000c00 	.word	0x48000c00
 8000b40:	48001000 	.word	0x48001000
 8000b44:	48001400 	.word	0x48001400
 8000b48:	48001800 	.word	0x48001800
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b60:	787b      	ldrb	r3, [r7, #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4013      	ands	r3, r2
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43d9      	mvns	r1, r3
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d130      	bne.n	8000c42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bec:	d038      	beq.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2232      	movs	r2, #50	; 0x32
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c14:	e002      	b.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c28:	d102      	bne.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f2      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3c:	d110      	bne.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e00f      	b.n	8000c62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4e:	d007      	beq.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40007000 	.word	0x40007000
 8000c74:	2000000c 	.word	0x2000000c
 8000c78:	431bde83 	.word	0x431bde83

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e3c6      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c8e:	4ba1      	ldr	r3, [pc, #644]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c98:	4b9e      	ldr	r3, [pc, #632]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 80e4 	beq.w	8000e78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d007      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x4a>
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2b0c      	cmp	r3, #12
 8000cba:	f040 808b 	bne.w	8000dd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	f040 8087 	bne.w	8000dd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cc6:	4b93      	ldr	r3, [pc, #588]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x62>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e39e      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a1a      	ldr	r2, [r3, #32]
 8000ce2:	4b8c      	ldr	r3, [pc, #560]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x7c>
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf6:	e005      	b.n	8000d04 <HAL_RCC_OscConfig+0x88>
 8000cf8:	4b86      	ldr	r3, [pc, #536]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d223      	bcs.n	8000d50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fd85 	bl	800181c <RCC_SetFlashLatencyFromMSIRange>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e37f      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d1c:	4b7d      	ldr	r3, [pc, #500]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a7c      	ldr	r2, [pc, #496]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b7a      	ldr	r3, [pc, #488]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4977      	ldr	r1, [pc, #476]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d3a:	4b76      	ldr	r3, [pc, #472]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	4972      	ldr	r1, [pc, #456]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]
 8000d4e:	e025      	b.n	8000d9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d50:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6f      	ldr	r2, [pc, #444]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	496a      	ldr	r1, [pc, #424]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d6e:	4b69      	ldr	r3, [pc, #420]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	4965      	ldr	r1, [pc, #404]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d109      	bne.n	8000d9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fd45 	bl	800181c <RCC_SetFlashLatencyFromMSIRange>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e33f      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d9c:	f000 fc48 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8000da0:	4602      	mov	r2, r0
 8000da2:	4b5c      	ldr	r3, [pc, #368]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	495a      	ldr	r1, [pc, #360]	; (8000f18 <HAL_RCC_OscConfig+0x29c>)
 8000dae:	5ccb      	ldrb	r3, [r1, r3]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	4a58      	ldr	r2, [pc, #352]	; (8000f1c <HAL_RCC_OscConfig+0x2a0>)
 8000dba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dbc:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <HAL_RCC_OscConfig+0x2a4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fd05 	bl	80057d0 <HAL_InitTick>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d052      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	e323      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d032      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ddc:	4b4d      	ldr	r3, [pc, #308]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fb9a 	bl	8000520 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df0:	f7ff fb96 	bl	8000520 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e30c      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a40      	ldr	r2, [pc, #256]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	493b      	ldr	r1, [pc, #236]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	4936      	ldr	r1, [pc, #216]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e01a      	b.n	8000e78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fb67 	bl	8000520 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e56:	f7ff fb63 	bl	8000520 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e2d9      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f0      	bne.n	8000e56 <HAL_RCC_OscConfig+0x1da>
 8000e74:	e000      	b.n	8000e78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d074      	beq.n	8000f6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d005      	beq.n	8000e96 <HAL_RCC_OscConfig+0x21a>
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b0c      	cmp	r3, #12
 8000e8e:	d10e      	bne.n	8000eae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d10b      	bne.n	8000eae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d064      	beq.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d160      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e2b6      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x24a>
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e01d      	b.n	8000f02 <HAL_RCC_OscConfig+0x286>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x26e>
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x286>
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_RCC_OscConfig+0x298>)
 8000efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01c      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fb09 	bl	8000520 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f10:	e011      	b.n	8000f36 <HAL_RCC_OscConfig+0x2ba>
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	08005ae8 	.word	0x08005ae8
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fafc 	bl	8000520 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e272      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f36:	4baf      	ldr	r3, [pc, #700]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f0      	beq.n	8000f24 <HAL_RCC_OscConfig+0x2a8>
 8000f42:	e014      	b.n	8000f6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f44:	f7ff faec 	bl	8000520 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4c:	f7ff fae8 	bl	8000520 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b64      	cmp	r3, #100	; 0x64
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e25e      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5e:	4ba5      	ldr	r3, [pc, #660]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2d0>
 8000f6a:	e000      	b.n	8000f6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d060      	beq.n	800103c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_OscConfig+0x310>
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d119      	bne.n	8000fba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d116      	bne.n	8000fba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f8c:	4b99      	ldr	r3, [pc, #612]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x328>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e23b      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b93      	ldr	r3, [pc, #588]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	061b      	lsls	r3, r3, #24
 8000fb2:	4990      	ldr	r1, [pc, #576]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb8:	e040      	b.n	800103c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d023      	beq.n	800100a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc2:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a8b      	ldr	r2, [pc, #556]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fce:	f7ff faa7 	bl	8000520 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff faa3 	bl	8000520 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e219      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe8:	4b82      	ldr	r3, [pc, #520]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4b7f      	ldr	r3, [pc, #508]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	497c      	ldr	r1, [pc, #496]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b7a      	ldr	r3, [pc, #488]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a79      	ldr	r2, [pc, #484]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001016:	f7ff fa83 	bl	8000520 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fa7f 	bl	8000520 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1f5      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001030:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d03c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d01c      	beq.n	800108a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001056:	4a67      	ldr	r2, [pc, #412]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001060:	f7ff fa5e 	bl	8000520 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fa5a 	bl	8000520 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e1d0      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800107a:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 800107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ef      	beq.n	8001068 <HAL_RCC_OscConfig+0x3ec>
 8001088:	e01b      	b.n	80010c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 800108c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001090:	4a58      	ldr	r2, [pc, #352]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109a:	f7ff fa41 	bl	8000520 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a2:	f7ff fa3d 	bl	8000520 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e1b3      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b4:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 80010b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1ef      	bne.n	80010a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 80a6 	beq.w	800121c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10d      	bne.n	80010fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	4a43      	ldr	r2, [pc, #268]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6593      	str	r3, [r2, #88]	; 0x58
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f8:	2301      	movs	r3, #1
 80010fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <HAL_RCC_OscConfig+0x57c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d118      	bne.n	800113a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_RCC_OscConfig+0x57c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <HAL_RCC_OscConfig+0x57c>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001114:	f7ff fa04 	bl	8000520 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111c:	f7ff fa00 	bl	8000520 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e176      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <HAL_RCC_OscConfig+0x57c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_RCC_OscConfig+0x4d8>
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001148:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001152:	e024      	b.n	800119e <HAL_RCC_OscConfig+0x522>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b05      	cmp	r3, #5
 800115a:	d110      	bne.n	800117e <HAL_RCC_OscConfig+0x502>
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800117c:	e00f      	b.n	800119e <HAL_RCC_OscConfig+0x522>
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 8001196:	f023 0304 	bic.w	r3, r3, #4
 800119a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d016      	beq.n	80011d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a6:	f7ff f9bb 	bl	8000520 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff f9b7 	bl	8000520 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e12b      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x578>)
 80011c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0ed      	beq.n	80011ae <HAL_RCC_OscConfig+0x532>
 80011d2:	e01a      	b.n	800120a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d4:	f7ff f9a4 	bl	8000520 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011da:	e00f      	b.n	80011fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011dc:	f7ff f9a0 	bl	8000520 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d906      	bls.n	80011fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e114      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011fc:	4b89      	ldr	r3, [pc, #548]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80011fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1e8      	bne.n	80011dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001210:	4b84      	ldr	r3, [pc, #528]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	4a83      	ldr	r2, [pc, #524]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80fa 	beq.w	800141a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	2b02      	cmp	r3, #2
 800122c:	f040 80d0 	bne.w	80013d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001230:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	429a      	cmp	r2, r3
 8001242:	d130      	bne.n	80012a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	3b01      	subs	r3, #1
 8001250:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d127      	bne.n	80012a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d11f      	bne.n	80012a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001270:	2a07      	cmp	r2, #7
 8001272:	bf14      	ite	ne
 8001274:	2201      	movne	r2, #1
 8001276:	2200      	moveq	r2, #0
 8001278:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800127a:	4293      	cmp	r3, r2
 800127c:	d113      	bne.n	80012a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	3b01      	subs	r3, #1
 800128c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	3b01      	subs	r3, #1
 80012a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d06e      	beq.n	8001384 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b0c      	cmp	r3, #12
 80012aa:	d069      	beq.n	8001380 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ac:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0a9      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012c8:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80012ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012d4:	f7ff f924 	bl	8000520 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff f920 	bl	8000520 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e096      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ee:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_RCC_OscConfig+0x7ac>)
 8001300:	4013      	ands	r3, r2
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800130a:	3a01      	subs	r2, #1
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	4311      	orrs	r1, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001314:	0212      	lsls	r2, r2, #8
 8001316:	4311      	orrs	r1, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800131c:	0852      	lsrs	r2, r2, #1
 800131e:	3a01      	subs	r2, #1
 8001320:	0552      	lsls	r2, r2, #21
 8001322:	4311      	orrs	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001328:	0852      	lsrs	r2, r2, #1
 800132a:	3a01      	subs	r2, #1
 800132c:	0652      	lsls	r2, r2, #25
 800132e:	4311      	orrs	r1, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001334:	0912      	lsrs	r2, r2, #4
 8001336:	0452      	lsls	r2, r2, #17
 8001338:	430a      	orrs	r2, r1
 800133a:	493a      	ldr	r1, [pc, #232]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 800133c:	4313      	orrs	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a37      	ldr	r2, [pc, #220]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a34      	ldr	r2, [pc, #208]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001356:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001358:	f7ff f8e2 	bl	8000520 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff f8de 	bl	8000520 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e054      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800137e:	e04c      	b.n	800141a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e04b      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d144      	bne.n	800141a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a23      	ldr	r2, [pc, #140]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80013a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013a8:	f7ff f8ba 	bl	8000520 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff f8b6 	bl	8000520 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e02c      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x734>
 80013ce:	e024      	b.n	800141a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	d01f      	beq.n	8001416 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80013dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff f89d 	bl	8000520 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f899 	bl	8000520 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e00f      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4905      	ldr	r1, [pc, #20]	; (8001424 <HAL_RCC_OscConfig+0x7a8>)
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_OscConfig+0x7b0>)
 8001410:	4013      	ands	r3, r2
 8001412:	60cb      	str	r3, [r1, #12]
 8001414:	e001      	b.n	800141a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	f99d808c 	.word	0xf99d808c
 800142c:	feeefffc 	.word	0xfeeefffc

08001430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0e7      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b75      	ldr	r3, [pc, #468]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d910      	bls.n	8001474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 0207 	bic.w	r2, r3, #7
 800145a:	4970      	ldr	r1, [pc, #448]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0cf      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d010      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	4b66      	ldr	r3, [pc, #408]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148c:	429a      	cmp	r2, r3
 800148e:	d908      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4960      	ldr	r1, [pc, #384]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d04c      	beq.n	8001548 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b6:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d121      	bne.n	8001506 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0a6      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d115      	bne.n	8001506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e09a      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e6:	4b4e      	ldr	r3, [pc, #312]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e08e      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e086      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4943      	ldr	r1, [pc, #268]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001518:	f7ff f802 	bl	8000520 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7fe fffe 	bl	8000520 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e06e      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d010      	beq.n	8001576 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001560:	429a      	cmp	r2, r3
 8001562:	d208      	bcs.n	8001576 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	492b      	ldr	r1, [pc, #172]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d210      	bcs.n	80015a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 0207 	bic.w	r2, r3, #7
 800158c:	4923      	ldr	r1, [pc, #140]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_RCC_ClockConfig+0x1ec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e036      	b.n	8001614 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4918      	ldr	r1, [pc, #96]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4910      	ldr	r1, [pc, #64]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e4:	f000 f824 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	490b      	ldr	r1, [pc, #44]	; (8001624 <HAL_RCC_ClockConfig+0x1f4>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1f8>)
 8001602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1fc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f004 f8e1 	bl	80057d0 <HAL_InitTick>
 800160e:	4603      	mov	r3, r0
 8001610:	72fb      	strb	r3, [r7, #11]

  return status;
 8001612:	7afb      	ldrb	r3, [r7, #11]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40022000 	.word	0x40022000
 8001620:	40021000 	.word	0x40021000
 8001624:	08005ae8 	.word	0x08005ae8
 8001628:	2000000c 	.word	0x2000000c
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x34>
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d121      	bne.n	80016a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d11e      	bne.n	80016a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e005      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001680:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_RCC_GetSysClockFreq+0x10c>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_GetSysClockFreq+0x110>)
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	e004      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_RCC_GetSysClockFreq+0x114>)
 80016b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d134      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d003      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0xac>
 80016d4:	e005      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_RCC_GetSysClockFreq+0x110>)
 80016d8:	617b      	str	r3, [r7, #20]
      break;
 80016da:	e005      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_GetSysClockFreq+0x114>)
 80016de:	617b      	str	r3, [r7, #20]
      break;
 80016e0:	e002      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	617b      	str	r3, [r7, #20]
      break;
 80016e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	fb02 f203 	mul.w	r2, r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_RCC_GetSysClockFreq+0x108>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	0e5b      	lsrs	r3, r3, #25
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	3301      	adds	r3, #1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001728:	69bb      	ldr	r3, [r7, #24]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	08005b00 	.word	0x08005b00
 8001740:	00f42400 	.word	0x00f42400
 8001744:	007a1200 	.word	0x007a1200

08001748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_GetHCLKFreq+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000000c 	.word	0x2000000c

08001760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001764:	f7ff fff0 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001768:	4602      	mov	r2, r0
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	4904      	ldr	r1, [pc, #16]	; (8001788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	08005af8 	.word	0x08005af8

0800178c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001790:	f7ff ffda 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001794:	4602      	mov	r2, r0
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	0adb      	lsrs	r3, r3, #11
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	4904      	ldr	r1, [pc, #16]	; (80017b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017a2:	5ccb      	ldrb	r3, [r1, r3]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08005af8 	.word	0x08005af8

080017b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	220f      	movs	r2, #15
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_GetClockConfig+0x5c>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_RCC_GetClockConfig+0x60>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0207 	and.w	r2, r3, #7
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40022000 	.word	0x40022000

0800181c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001834:	f7ff f9be 	bl	8000bb4 <HAL_PWREx_GetVoltageRange>
 8001838:	6178      	str	r0, [r7, #20]
 800183a:	e014      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001854:	f7ff f9ae 	bl	8000bb4 <HAL_PWREx_GetVoltageRange>
 8001858:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186c:	d10b      	bne.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	d919      	bls.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2ba0      	cmp	r3, #160	; 0xa0
 8001878:	d902      	bls.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800187a:	2302      	movs	r3, #2
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	e013      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001880:	2301      	movs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e010      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d902      	bls.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800188c:	2303      	movs	r3, #3
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e00a      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d102      	bne.n	800189e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001898:	2302      	movs	r3, #2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e004      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b70      	cmp	r3, #112	; 0x70
 80018a2:	d101      	bne.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a4:	2301      	movs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 0207 	bic.w	r2, r3, #7
 80018b0:	4909      	ldr	r1, [pc, #36]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80018e4:	2300      	movs	r3, #0
 80018e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018e8:	2300      	movs	r3, #0
 80018ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d041      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001900:	d02a      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001902:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001906:	d824      	bhi.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800190c:	d008      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800190e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001912:	d81e      	bhi.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00a      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191c:	d010      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800191e:	e018      	b.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001920:	4b86      	ldr	r3, [pc, #536]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a85      	ldr	r2, [pc, #532]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800192c:	e015      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fabb 	bl	8001eb0 <RCCEx_PLLSAI1_Config>
 800193a:	4603      	mov	r3, r0
 800193c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800193e:	e00c      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3320      	adds	r3, #32
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fba6 	bl	8002098 <RCCEx_PLLSAI2_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001950:	e003      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	74fb      	strb	r3, [r7, #19]
      break;
 8001956:	e000      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10b      	bne.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001960:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800196e:	4973      	ldr	r1, [pc, #460]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001970:	4313      	orrs	r3, r2
 8001972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001976:	e001      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d041      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800198c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001990:	d02a      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001992:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001996:	d824      	bhi.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800199c:	d008      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800199e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019a2:	d81e      	bhi.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d010      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019ae:	e018      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019b0:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a61      	ldr	r2, [pc, #388]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019bc:	e015      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fa73 	bl	8001eb0 <RCCEx_PLLSAI1_Config>
 80019ca:	4603      	mov	r3, r0
 80019cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019ce:	e00c      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3320      	adds	r3, #32
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fb5e 	bl	8002098 <RCCEx_PLLSAI2_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80019e0:	e003      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	74fb      	strb	r3, [r7, #19]
      break;
 80019e6:	e000      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80019e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019f0:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019fe:	494f      	ldr	r1, [pc, #316]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a06:	e001      	b.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a0 	beq.w	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	4a40      	ldr	r2, [pc, #256]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3a      	ldr	r2, [pc, #232]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe fd60 	bl	8000520 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a62:	e009      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7fe fd5c 	bl	8000520 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d902      	bls.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	74fb      	strb	r3, [r7, #19]
        break;
 8001a76:	e005      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ef      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d15c      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01f      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d019      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fd1b 	bl	8000520 <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aec:	e00b      	b.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7fe fd17 	bl	8000520 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d902      	bls.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	74fb      	strb	r3, [r7, #19]
            break;
 8001b04:	e006      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ec      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001b14:	7cfb      	ldrb	r3, [r7, #19]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b2a:	4904      	ldr	r1, [pc, #16]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001b32:	e009      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b34:	7cfb      	ldrb	r3, [r7, #19]
 8001b36:	74bb      	strb	r3, [r7, #18]
 8001b38:	e006      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b44:	7cfb      	ldrb	r3, [r7, #19]
 8001b46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b48:	7c7b      	ldrb	r3, [r7, #17]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	4a9d      	ldr	r2, [pc, #628]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b66:	4b98      	ldr	r3, [pc, #608]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	4994      	ldr	r1, [pc, #592]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b88:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	f023 020c 	bic.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	498c      	ldr	r1, [pc, #560]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001baa:	4b87      	ldr	r3, [pc, #540]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4983      	ldr	r1, [pc, #524]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00a      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	497b      	ldr	r1, [pc, #492]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	4972      	ldr	r1, [pc, #456]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	496a      	ldr	r1, [pc, #424]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	4961      	ldr	r1, [pc, #388]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00a      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c54:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	4959      	ldr	r1, [pc, #356]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c84:	4950      	ldr	r1, [pc, #320]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	4948      	ldr	r1, [pc, #288]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	493f      	ldr	r1, [pc, #252]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d028      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cea:	4937      	ldr	r1, [pc, #220]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d06:	60d3      	str	r3, [r2, #12]
 8001d08:	e011      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8c8 	bl	8001eb0 <RCCEx_PLLSAI1_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d028      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	491f      	ldr	r1, [pc, #124]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d64:	60d3      	str	r3, [r2, #12]
 8001d66:	e011      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2101      	movs	r1, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f899 	bl	8001eb0 <RCCEx_PLLSAI1_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d82:	7cfb      	ldrb	r3, [r7, #19]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d02b      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001db6:	d109      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a02      	ldr	r2, [pc, #8]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc2:	60d3      	str	r3, [r2, #12]
 8001dc4:	e014      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f867 	bl	8001eb0 <RCCEx_PLLSAI1_Config>
 8001de2:	4603      	mov	r3, r0
 8001de4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001dec:	7cfb      	ldrb	r3, [r7, #19]
 8001dee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d02f      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e0a:	4928      	ldr	r1, [pc, #160]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	2102      	movs	r1, #2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f844 	bl	8001eb0 <RCCEx_PLLSAI1_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d014      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e32:	7cfb      	ldrb	r3, [r7, #19]
 8001e34:	74bb      	strb	r3, [r7, #18]
 8001e36:	e011      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3320      	adds	r3, #32
 8001e46:	2102      	movs	r1, #2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f925 	bl	8002098 <RCCEx_PLLSAI2_Config>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e76:	490d      	ldr	r1, [pc, #52]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9a:	4904      	ldr	r1, [pc, #16]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001ea2:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000

08001eb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ebe:	4b75      	ldr	r3, [pc, #468]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d018      	beq.n	8001efc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10d      	bne.n	8001ef6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
       ||
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001ee2:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d047      	beq.n	8001f86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e044      	b.n	8001f86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d018      	beq.n	8001f36 <RCCEx_PLLSAI1_Config+0x86>
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d825      	bhi.n	8001f54 <RCCEx_PLLSAI1_Config+0xa4>
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d002      	beq.n	8001f12 <RCCEx_PLLSAI1_Config+0x62>
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d009      	beq.n	8001f24 <RCCEx_PLLSAI1_Config+0x74>
 8001f10:	e020      	b.n	8001f54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f12:	4b60      	ldr	r3, [pc, #384]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d11d      	bne.n	8001f5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f22:	e01a      	b.n	8001f5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f24:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d116      	bne.n	8001f5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f34:	e013      	b.n	8001f5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f52:	e006      	b.n	8001f62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	e004      	b.n	8001f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f5a:	bf00      	nop
 8001f5c:	e002      	b.n	8001f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f5e:	bf00      	nop
 8001f60:	e000      	b.n	8001f64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f62:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10d      	bne.n	8001f86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	4944      	ldr	r1, [pc, #272]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d17d      	bne.n	8002088 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f8c:	4b41      	ldr	r3, [pc, #260]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a40      	ldr	r2, [pc, #256]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f98:	f7fe fac2 	bl	8000520 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f9e:	e009      	b.n	8001fb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fa0:	f7fe fabe 	bl	8000520 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d902      	bls.n	8001fb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8001fb2:	e005      	b.n	8001fc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ef      	bne.n	8001fa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d160      	bne.n	8002088 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6892      	ldr	r2, [r2, #8]
 8001fdc:	0211      	lsls	r1, r2, #8
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68d2      	ldr	r2, [r2, #12]
 8001fe2:	0912      	lsrs	r2, r2, #4
 8001fe4:	0452      	lsls	r2, r2, #17
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	492a      	ldr	r1, [pc, #168]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	610b      	str	r3, [r1, #16]
 8001fee:	e027      	b.n	8002040 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d112      	bne.n	800201c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001ffe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6892      	ldr	r2, [r2, #8]
 8002006:	0211      	lsls	r1, r2, #8
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6912      	ldr	r2, [r2, #16]
 800200c:	0852      	lsrs	r2, r2, #1
 800200e:	3a01      	subs	r2, #1
 8002010:	0552      	lsls	r2, r2, #21
 8002012:	430a      	orrs	r2, r1
 8002014:	491f      	ldr	r1, [pc, #124]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	610b      	str	r3, [r1, #16]
 800201a:	e011      	b.n	8002040 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002024:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6892      	ldr	r2, [r2, #8]
 800202c:	0211      	lsls	r1, r2, #8
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6952      	ldr	r2, [r2, #20]
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0652      	lsls	r2, r2, #25
 8002038:	430a      	orrs	r2, r1
 800203a:	4916      	ldr	r1, [pc, #88]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800204a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe fa68 	bl	8000520 <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002052:	e009      	b.n	8002068 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002054:	f7fe fa64 	bl	8000520 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	73fb      	strb	r3, [r7, #15]
          break;
 8002066:	e005      	b.n	8002074 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4904      	ldr	r1, [pc, #16]	; (8002094 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d018      	beq.n	80020e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0203 	and.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d10d      	bne.n	80020de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
       ||
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80020ca:	4b61      	ldr	r3, [pc, #388]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
       ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d047      	beq.n	800216e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e044      	b.n	800216e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d018      	beq.n	800211e <RCCEx_PLLSAI2_Config+0x86>
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d825      	bhi.n	800213c <RCCEx_PLLSAI2_Config+0xa4>
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d002      	beq.n	80020fa <RCCEx_PLLSAI2_Config+0x62>
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d009      	beq.n	800210c <RCCEx_PLLSAI2_Config+0x74>
 80020f8:	e020      	b.n	800213c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020fa:	4b55      	ldr	r3, [pc, #340]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11d      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210a:	e01a      	b.n	8002142 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800210c:	4b50      	ldr	r3, [pc, #320]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d116      	bne.n	8002146 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800211c:	e013      	b.n	8002146 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800211e:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800212a:	4b49      	ldr	r3, [pc, #292]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800213a:	e006      	b.n	800214a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e004      	b.n	800214c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002142:	bf00      	nop
 8002144:	e002      	b.n	800214c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002146:	bf00      	nop
 8002148:	e000      	b.n	800214c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800214a:	bf00      	nop
    }

    if(status == HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	430b      	orrs	r3, r1
 8002168:	4939      	ldr	r1, [pc, #228]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 800216a:	4313      	orrs	r3, r2
 800216c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d167      	bne.n	8002244 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a35      	ldr	r2, [pc, #212]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002180:	f7fe f9ce 	bl	8000520 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002186:	e009      	b.n	800219c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002188:	f7fe f9ca 	bl	8000520 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d902      	bls.n	800219c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	73fb      	strb	r3, [r7, #15]
        break;
 800219a:	e005      	b.n	80021a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ef      	bne.n	8002188 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d14a      	bne.n	8002244 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d111      	bne.n	80021d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6892      	ldr	r2, [r2, #8]
 80021c4:	0211      	lsls	r1, r2, #8
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68d2      	ldr	r2, [r2, #12]
 80021ca:	0912      	lsrs	r2, r2, #4
 80021cc:	0452      	lsls	r2, r2, #17
 80021ce:	430a      	orrs	r2, r1
 80021d0:	491f      	ldr	r1, [pc, #124]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	614b      	str	r3, [r1, #20]
 80021d6:	e011      	b.n	80021fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	0211      	lsls	r1, r2, #8
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6912      	ldr	r2, [r2, #16]
 80021ee:	0852      	lsrs	r2, r2, #1
 80021f0:	3a01      	subs	r2, #1
 80021f2:	0652      	lsls	r2, r2, #25
 80021f4:	430a      	orrs	r2, r1
 80021f6:	4916      	ldr	r1, [pc, #88]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a13      	ldr	r2, [pc, #76]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002206:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe f98a 	bl	8000520 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800220e:	e009      	b.n	8002224 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002210:	f7fe f986 	bl	8000520 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d902      	bls.n	8002224 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	73fb      	strb	r3, [r7, #15]
          break;
 8002222:	e005      	b.n	8002230 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ef      	beq.n	8002210 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	4904      	ldr	r1, [pc, #16]	; (8002250 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002240:	4313      	orrs	r3, r2
 8002242:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e049      	b.n	80022fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f841 	bl	8002302 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 f9f8 	bl	8002688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d001      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e04f      	b.n	80023d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_TIM_Base_Start_IT+0xc4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01d      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x76>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d018      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x76>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x76>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00e      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x76>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x76>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_TIM_Base_Start_IT+0x76>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d115      	bne.n	80023ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002396:	4013      	ands	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d015      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0xb4>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d011      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b8:	e008      	b.n	80023cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e000      	b.n	80023ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40000800 	.word	0x40000800
 80023e8:	40000c00 	.word	0x40000c00
 80023ec:	40013400 	.word	0x40013400
 80023f0:	40014000 	.word	0x40014000
 80023f4:	00010007 	.word	0x00010007

080023f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0202 	mvn.w	r2, #2
 8002424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f905 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8f7 	bl	8002636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f908 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0204 	mvn.w	r2, #4
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8db 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8cd 	bl	8002636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8de 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d122      	bne.n	80024fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0208 	mvn.w	r2, #8
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2204      	movs	r2, #4
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8b1 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8a3 	bl	8002636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f8b4 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d122      	bne.n	8002550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0210 	mvn.w	r2, #16
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2208      	movs	r2, #8
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f887 	bl	800264a <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f879 	bl	8002636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f88a 	bl	800265e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0201 	mvn.w	r2, #1
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f003 f884 	bl	8005684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f914 	bl	80027d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b6:	d10e      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d107      	bne.n	80025d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f907 	bl	80027e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d10e      	bne.n	8002602 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f838 	bl	8002672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b20      	cmp	r3, #32
 800260e:	d10e      	bne.n	800262e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d107      	bne.n	800262e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f06f 0220 	mvn.w	r2, #32
 8002626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8c7 	bl	80027bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a40      	ldr	r2, [pc, #256]	; (800279c <TIM_Base_SetConfig+0x114>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a6:	d00f      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3d      	ldr	r2, [pc, #244]	; (80027a0 <TIM_Base_SetConfig+0x118>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	; (80027a4 <TIM_Base_SetConfig+0x11c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <TIM_Base_SetConfig+0x120>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <TIM_Base_SetConfig+0x124>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2f      	ldr	r2, [pc, #188]	; (800279c <TIM_Base_SetConfig+0x114>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d01b      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <TIM_Base_SetConfig+0x118>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d017      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <TIM_Base_SetConfig+0x11c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <TIM_Base_SetConfig+0x120>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00f      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <TIM_Base_SetConfig+0x124>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00b      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <TIM_Base_SetConfig+0x128>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <TIM_Base_SetConfig+0x12c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x9a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <TIM_Base_SetConfig+0x130>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <TIM_Base_SetConfig+0x114>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00f      	beq.n	8002780 <TIM_Base_SetConfig+0xf8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <TIM_Base_SetConfig+0x124>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_Base_SetConfig+0xf8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <TIM_Base_SetConfig+0x128>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_Base_SetConfig+0xf8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <TIM_Base_SetConfig+0x12c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_Base_SetConfig+0xf8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <TIM_Base_SetConfig+0x130>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	615a      	str	r2, [r3, #20]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40013400 	.word	0x40013400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40014400 	.word	0x40014400
 80027b8:	40014800 	.word	0x40014800

080027bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e040      	b.n	800288c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f002 ff72 	bl	8005704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fc22 	bl	8003080 <UART_SetConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fea0 	bl	8003594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 ff27 	bl	80036d8 <UART_CheckIdleState>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	f040 8082 	bne.w	80029b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_UART_Transmit+0x26>
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07a      	b.n	80029b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_UART_Transmit+0x38>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e073      	b.n	80029b4 <HAL_UART_Transmit+0x120>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2221      	movs	r2, #33	; 0x21
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e2:	f7fd fe1d 	bl	8000520 <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d108      	bne.n	8002914 <HAL_UART_Transmit+0x80>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e003      	b.n	800291c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002924:	e02d      	b.n	8002982 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 ff1a 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e039      	b.n	80029b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002952:	b292      	uxth	r2, r2
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	3302      	adds	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e008      	b.n	8002970 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b292      	uxth	r2, r2
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1cb      	bne.n	8002926 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	2140      	movs	r1, #64	; 0x40
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fee6 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e005      	b.n	80029b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d142      	bne.n	8002a58 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Receive_IT+0x22>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03b      	b.n	8002a5a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Receive_IT+0x34>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e034      	b.n	8002a5a <HAL_UART_Receive_IT+0x9e>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_UART_Receive_IT+0xa8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d01f      	beq.n	8002a48 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	e853 3f00 	ldrex	r3, [r3]
 8002a22:	613b      	str	r3, [r7, #16]
   return(result);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a38:	69f9      	ldr	r1, [r7, #28]
 8002a3a:	6a3a      	ldr	r2, [r7, #32]
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e6      	bne.n	8002a16 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 ff50 	bl	80038f4 <UART_Start_Receive_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40008000 	.word	0x40008000

08002a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0ba      	sub	sp, #232	; 0xe8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a96:	4013      	ands	r3, r2
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d115      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00f      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 82a6 	beq.w	8003012 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      }
      return;
 8002ace:	e2a0      	b.n	8003012 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8117 	beq.w	8002d08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_UART_IRQHandler+0x298>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 810a 	beq.w	8002d08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d011      	beq.n	8002b24 <HAL_UART_IRQHandler+0xbc>
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d011      	beq.n	8002b54 <HAL_UART_IRQHandler+0xec>
 8002b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d011      	beq.n	8002b84 <HAL_UART_IRQHandler+0x11c>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2204      	movs	r2, #4
 8002b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7a:	f043 0202 	orr.w	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb6:	f043 0208 	orr.w	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x18a>
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 820c 	beq.w	8003016 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d005      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d04f      	beq.n	8002cea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 ff1c 	bl	8003a88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d141      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3308      	adds	r3, #8
 8002c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3308      	adds	r3, #8
 8002c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1d9      	bne.n	8002c5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d013      	beq.n	8002cda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_UART_IRQHandler+0x29c>)
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fd5a 	bl	8000778 <HAL_DMA_Abort_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d017      	beq.n	8002cfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	e00f      	b.n	8002cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9ba 	bl	8003054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e00b      	b.n	8002cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9b6 	bl	8003054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e007      	b.n	8002cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9b2 	bl	8003054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002cf8:	e18d      	b.n	8003016 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfa:	bf00      	nop
    return;
 8002cfc:	e18b      	b.n	8003016 <HAL_UART_IRQHandler+0x5ae>
 8002cfe:	bf00      	nop
 8002d00:	04000120 	.word	0x04000120
 8002d04:	08003b4f 	.word	0x08003b4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 8146 	bne.w	8002f9e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 813f 	beq.w	8002f9e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8138 	beq.w	8002f9e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	f040 80b4 	bne.w	8002eae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 815f 	beq.w	800301a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d66:	429a      	cmp	r2, r3
 8002d68:	f080 8157 	bcs.w	800301a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8085 	bne.w	8002e92 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002db6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1da      	bne.n	8002d88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002df6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e1      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	f023 0310 	bic.w	r3, r3, #16
 8002e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e4      	bne.n	8002e52 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fc35 	bl	80006fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8de 	bl	8003068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eac:	e0b5      	b.n	800301a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a7 	beq.w	800301e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a2 	beq.w	800301e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
 8002efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e4      	bne.n	8002eda <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3308      	adds	r3, #8
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f34:	633a      	str	r2, [r7, #48]	; 0x30
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e3      	bne.n	8002f10 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0310 	bic.w	r3, r3, #16
 8002f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	69b9      	ldr	r1, [r7, #24]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	617b      	str	r3, [r7, #20]
   return(result);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e4      	bne.n	8002f5a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f866 	bl	8003068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f9c:	e03f      	b.n	800301e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x560>
 8002faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 ff64 	bl	8003e8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fc6:	e02d      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01c      	beq.n	8003022 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
    }
    return;
 8002ff0:	e017      	b.n	8003022 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_UART_IRQHandler+0x5bc>
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fdb5 	bl	8003b7a <UART_EndTransmit_IT>
    return;
 8003010:	e008      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003012:	bf00      	nop
 8003014:	e006      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003016:	bf00      	nop
 8003018:	e004      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
      return;
 800301a:	bf00      	nop
 800301c:	e002      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
      return;
 800301e:	bf00      	nop
 8003020:	e000      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003022:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003024:	37e8      	adds	r7, #232	; 0xe8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop

0800302c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4bad      	ldr	r3, [pc, #692]	; (8003360 <UART_SetConfig+0x2e0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	69f9      	ldr	r1, [r7, #28]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4aa2      	ldr	r2, [pc, #648]	; (8003364 <UART_SetConfig+0x2e4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a99      	ldr	r2, [pc, #612]	; (8003368 <UART_SetConfig+0x2e8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d121      	bne.n	800314a <UART_SetConfig+0xca>
 8003106:	4b99      	ldr	r3, [pc, #612]	; (800336c <UART_SetConfig+0x2ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d817      	bhi.n	8003144 <UART_SetConfig+0xc4>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x9c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003139 	.word	0x08003139
 8003124:	08003133 	.word	0x08003133
 8003128:	0800313f 	.word	0x0800313f
 800312c:	2301      	movs	r3, #1
 800312e:	76fb      	strb	r3, [r7, #27]
 8003130:	e0e7      	b.n	8003302 <UART_SetConfig+0x282>
 8003132:	2302      	movs	r3, #2
 8003134:	76fb      	strb	r3, [r7, #27]
 8003136:	e0e4      	b.n	8003302 <UART_SetConfig+0x282>
 8003138:	2304      	movs	r3, #4
 800313a:	76fb      	strb	r3, [r7, #27]
 800313c:	e0e1      	b.n	8003302 <UART_SetConfig+0x282>
 800313e:	2308      	movs	r3, #8
 8003140:	76fb      	strb	r3, [r7, #27]
 8003142:	e0de      	b.n	8003302 <UART_SetConfig+0x282>
 8003144:	2310      	movs	r3, #16
 8003146:	76fb      	strb	r3, [r7, #27]
 8003148:	e0db      	b.n	8003302 <UART_SetConfig+0x282>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a88      	ldr	r2, [pc, #544]	; (8003370 <UART_SetConfig+0x2f0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d132      	bne.n	80031ba <UART_SetConfig+0x13a>
 8003154:	4b85      	ldr	r3, [pc, #532]	; (800336c <UART_SetConfig+0x2ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d828      	bhi.n	80031b4 <UART_SetConfig+0x134>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <UART_SetConfig+0xe8>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800319d 	.word	0x0800319d
 800316c:	080031b5 	.word	0x080031b5
 8003170:	080031b5 	.word	0x080031b5
 8003174:	080031b5 	.word	0x080031b5
 8003178:	080031a9 	.word	0x080031a9
 800317c:	080031b5 	.word	0x080031b5
 8003180:	080031b5 	.word	0x080031b5
 8003184:	080031b5 	.word	0x080031b5
 8003188:	080031a3 	.word	0x080031a3
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031b5 	.word	0x080031b5
 8003198:	080031af 	.word	0x080031af
 800319c:	2300      	movs	r3, #0
 800319e:	76fb      	strb	r3, [r7, #27]
 80031a0:	e0af      	b.n	8003302 <UART_SetConfig+0x282>
 80031a2:	2302      	movs	r3, #2
 80031a4:	76fb      	strb	r3, [r7, #27]
 80031a6:	e0ac      	b.n	8003302 <UART_SetConfig+0x282>
 80031a8:	2304      	movs	r3, #4
 80031aa:	76fb      	strb	r3, [r7, #27]
 80031ac:	e0a9      	b.n	8003302 <UART_SetConfig+0x282>
 80031ae:	2308      	movs	r3, #8
 80031b0:	76fb      	strb	r3, [r7, #27]
 80031b2:	e0a6      	b.n	8003302 <UART_SetConfig+0x282>
 80031b4:	2310      	movs	r3, #16
 80031b6:	76fb      	strb	r3, [r7, #27]
 80031b8:	e0a3      	b.n	8003302 <UART_SetConfig+0x282>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6d      	ldr	r2, [pc, #436]	; (8003374 <UART_SetConfig+0x2f4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d120      	bne.n	8003206 <UART_SetConfig+0x186>
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <UART_SetConfig+0x2ec>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031ce:	2b30      	cmp	r3, #48	; 0x30
 80031d0:	d013      	beq.n	80031fa <UART_SetConfig+0x17a>
 80031d2:	2b30      	cmp	r3, #48	; 0x30
 80031d4:	d814      	bhi.n	8003200 <UART_SetConfig+0x180>
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d009      	beq.n	80031ee <UART_SetConfig+0x16e>
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d810      	bhi.n	8003200 <UART_SetConfig+0x180>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <UART_SetConfig+0x168>
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d006      	beq.n	80031f4 <UART_SetConfig+0x174>
 80031e6:	e00b      	b.n	8003200 <UART_SetConfig+0x180>
 80031e8:	2300      	movs	r3, #0
 80031ea:	76fb      	strb	r3, [r7, #27]
 80031ec:	e089      	b.n	8003302 <UART_SetConfig+0x282>
 80031ee:	2302      	movs	r3, #2
 80031f0:	76fb      	strb	r3, [r7, #27]
 80031f2:	e086      	b.n	8003302 <UART_SetConfig+0x282>
 80031f4:	2304      	movs	r3, #4
 80031f6:	76fb      	strb	r3, [r7, #27]
 80031f8:	e083      	b.n	8003302 <UART_SetConfig+0x282>
 80031fa:	2308      	movs	r3, #8
 80031fc:	76fb      	strb	r3, [r7, #27]
 80031fe:	e080      	b.n	8003302 <UART_SetConfig+0x282>
 8003200:	2310      	movs	r3, #16
 8003202:	76fb      	strb	r3, [r7, #27]
 8003204:	e07d      	b.n	8003302 <UART_SetConfig+0x282>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5b      	ldr	r2, [pc, #364]	; (8003378 <UART_SetConfig+0x2f8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d120      	bne.n	8003252 <UART_SetConfig+0x1d2>
 8003210:	4b56      	ldr	r3, [pc, #344]	; (800336c <UART_SetConfig+0x2ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800321a:	2bc0      	cmp	r3, #192	; 0xc0
 800321c:	d013      	beq.n	8003246 <UART_SetConfig+0x1c6>
 800321e:	2bc0      	cmp	r3, #192	; 0xc0
 8003220:	d814      	bhi.n	800324c <UART_SetConfig+0x1cc>
 8003222:	2b80      	cmp	r3, #128	; 0x80
 8003224:	d009      	beq.n	800323a <UART_SetConfig+0x1ba>
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d810      	bhi.n	800324c <UART_SetConfig+0x1cc>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <UART_SetConfig+0x1b4>
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d006      	beq.n	8003240 <UART_SetConfig+0x1c0>
 8003232:	e00b      	b.n	800324c <UART_SetConfig+0x1cc>
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e063      	b.n	8003302 <UART_SetConfig+0x282>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e060      	b.n	8003302 <UART_SetConfig+0x282>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e05d      	b.n	8003302 <UART_SetConfig+0x282>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e05a      	b.n	8003302 <UART_SetConfig+0x282>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e057      	b.n	8003302 <UART_SetConfig+0x282>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a49      	ldr	r2, [pc, #292]	; (800337c <UART_SetConfig+0x2fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d125      	bne.n	80032a8 <UART_SetConfig+0x228>
 800325c:	4b43      	ldr	r3, [pc, #268]	; (800336c <UART_SetConfig+0x2ec>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d017      	beq.n	800329c <UART_SetConfig+0x21c>
 800326c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003270:	d817      	bhi.n	80032a2 <UART_SetConfig+0x222>
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d00b      	beq.n	8003290 <UART_SetConfig+0x210>
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d811      	bhi.n	80032a2 <UART_SetConfig+0x222>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <UART_SetConfig+0x20a>
 8003282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003286:	d006      	beq.n	8003296 <UART_SetConfig+0x216>
 8003288:	e00b      	b.n	80032a2 <UART_SetConfig+0x222>
 800328a:	2300      	movs	r3, #0
 800328c:	76fb      	strb	r3, [r7, #27]
 800328e:	e038      	b.n	8003302 <UART_SetConfig+0x282>
 8003290:	2302      	movs	r3, #2
 8003292:	76fb      	strb	r3, [r7, #27]
 8003294:	e035      	b.n	8003302 <UART_SetConfig+0x282>
 8003296:	2304      	movs	r3, #4
 8003298:	76fb      	strb	r3, [r7, #27]
 800329a:	e032      	b.n	8003302 <UART_SetConfig+0x282>
 800329c:	2308      	movs	r3, #8
 800329e:	76fb      	strb	r3, [r7, #27]
 80032a0:	e02f      	b.n	8003302 <UART_SetConfig+0x282>
 80032a2:	2310      	movs	r3, #16
 80032a4:	76fb      	strb	r3, [r7, #27]
 80032a6:	e02c      	b.n	8003302 <UART_SetConfig+0x282>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <UART_SetConfig+0x2e4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d125      	bne.n	80032fe <UART_SetConfig+0x27e>
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <UART_SetConfig+0x2ec>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c0:	d017      	beq.n	80032f2 <UART_SetConfig+0x272>
 80032c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c6:	d817      	bhi.n	80032f8 <UART_SetConfig+0x278>
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032cc:	d00b      	beq.n	80032e6 <UART_SetConfig+0x266>
 80032ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d2:	d811      	bhi.n	80032f8 <UART_SetConfig+0x278>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <UART_SetConfig+0x260>
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d006      	beq.n	80032ec <UART_SetConfig+0x26c>
 80032de:	e00b      	b.n	80032f8 <UART_SetConfig+0x278>
 80032e0:	2300      	movs	r3, #0
 80032e2:	76fb      	strb	r3, [r7, #27]
 80032e4:	e00d      	b.n	8003302 <UART_SetConfig+0x282>
 80032e6:	2302      	movs	r3, #2
 80032e8:	76fb      	strb	r3, [r7, #27]
 80032ea:	e00a      	b.n	8003302 <UART_SetConfig+0x282>
 80032ec:	2304      	movs	r3, #4
 80032ee:	76fb      	strb	r3, [r7, #27]
 80032f0:	e007      	b.n	8003302 <UART_SetConfig+0x282>
 80032f2:	2308      	movs	r3, #8
 80032f4:	76fb      	strb	r3, [r7, #27]
 80032f6:	e004      	b.n	8003302 <UART_SetConfig+0x282>
 80032f8:	2310      	movs	r3, #16
 80032fa:	76fb      	strb	r3, [r7, #27]
 80032fc:	e001      	b.n	8003302 <UART_SetConfig+0x282>
 80032fe:	2310      	movs	r3, #16
 8003300:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a17      	ldr	r2, [pc, #92]	; (8003364 <UART_SetConfig+0x2e4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	f040 8087 	bne.w	800341c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800330e:	7efb      	ldrb	r3, [r7, #27]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d837      	bhi.n	8003384 <UART_SetConfig+0x304>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <UART_SetConfig+0x29c>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003341 	.word	0x08003341
 8003320:	08003385 	.word	0x08003385
 8003324:	08003349 	.word	0x08003349
 8003328:	08003385 	.word	0x08003385
 800332c:	0800334f 	.word	0x0800334f
 8003330:	08003385 	.word	0x08003385
 8003334:	08003385 	.word	0x08003385
 8003338:	08003385 	.word	0x08003385
 800333c:	08003357 	.word	0x08003357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003340:	f7fe fa0e 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 8003344:	6178      	str	r0, [r7, #20]
        break;
 8003346:	e022      	b.n	800338e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <UART_SetConfig+0x300>)
 800334a:	617b      	str	r3, [r7, #20]
        break;
 800334c:	e01f      	b.n	800338e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334e:	f7fe f96f 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8003352:	6178      	str	r0, [r7, #20]
        break;
 8003354:	e01b      	b.n	800338e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335a:	617b      	str	r3, [r7, #20]
        break;
 800335c:	e017      	b.n	800338e <UART_SetConfig+0x30e>
 800335e:	bf00      	nop
 8003360:	efff69f3 	.word	0xefff69f3
 8003364:	40008000 	.word	0x40008000
 8003368:	40013800 	.word	0x40013800
 800336c:	40021000 	.word	0x40021000
 8003370:	40004400 	.word	0x40004400
 8003374:	40004800 	.word	0x40004800
 8003378:	40004c00 	.word	0x40004c00
 800337c:	40005000 	.word	0x40005000
 8003380:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	76bb      	strb	r3, [r7, #26]
        break;
 800338c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80f1 	beq.w	8003578 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d305      	bcc.n	80033b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d902      	bls.n	80033b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	76bb      	strb	r3, [r7, #26]
 80033b6:	e0df      	b.n	8003578 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	020b      	lsls	r3, r1, #8
 80033ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033ce:	0202      	lsls	r2, r0, #8
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	6849      	ldr	r1, [r1, #4]
 80033d4:	0849      	lsrs	r1, r1, #1
 80033d6:	4608      	mov	r0, r1
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	1814      	adds	r4, r2, r0
 80033de:	eb43 0501 	adc.w	r5, r3, r1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fc feee 	bl	80001d0 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003402:	d308      	bcc.n	8003416 <UART_SetConfig+0x396>
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d204      	bcs.n	8003416 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e0b0      	b.n	8003578 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	76bb      	strb	r3, [r7, #26]
 800341a:	e0ad      	b.n	8003578 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d15b      	bne.n	80034de <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003426:	7efb      	ldrb	r3, [r7, #27]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d828      	bhi.n	800347e <UART_SetConfig+0x3fe>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0x3b4>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003459 	.word	0x08003459
 8003438:	08003461 	.word	0x08003461
 800343c:	08003469 	.word	0x08003469
 8003440:	0800347f 	.word	0x0800347f
 8003444:	0800346f 	.word	0x0800346f
 8003448:	0800347f 	.word	0x0800347f
 800344c:	0800347f 	.word	0x0800347f
 8003450:	0800347f 	.word	0x0800347f
 8003454:	08003477 	.word	0x08003477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe f982 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 800345c:	6178      	str	r0, [r7, #20]
        break;
 800345e:	e013      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7fe f994 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 8003464:	6178      	str	r0, [r7, #20]
        break;
 8003466:	e00f      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003468:	4b49      	ldr	r3, [pc, #292]	; (8003590 <UART_SetConfig+0x510>)
 800346a:	617b      	str	r3, [r7, #20]
        break;
 800346c:	e00c      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346e:	f7fe f8df 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 8003472:	6178      	str	r0, [r7, #20]
        break;
 8003474:	e008      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	617b      	str	r3, [r7, #20]
        break;
 800347c:	e004      	b.n	8003488 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	76bb      	strb	r3, [r7, #26]
        break;
 8003486:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d074      	beq.n	8003578 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d916      	bls.n	80034d8 <UART_SetConfig+0x458>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d212      	bcs.n	80034d8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f023 030f 	bic.w	r3, r3, #15
 80034ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e04f      	b.n	8003578 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	76bb      	strb	r3, [r7, #26]
 80034dc:	e04c      	b.n	8003578 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034de:	7efb      	ldrb	r3, [r7, #27]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d828      	bhi.n	8003536 <UART_SetConfig+0x4b6>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x46c>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003521 	.word	0x08003521
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003527 	.word	0x08003527
 8003500:	08003537 	.word	0x08003537
 8003504:	08003537 	.word	0x08003537
 8003508:	08003537 	.word	0x08003537
 800350c:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe f926 	bl	8001760 <HAL_RCC_GetPCLK1Freq>
 8003514:	6178      	str	r0, [r7, #20]
        break;
 8003516:	e013      	b.n	8003540 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7fe f938 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 800351c:	6178      	str	r0, [r7, #20]
        break;
 800351e:	e00f      	b.n	8003540 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <UART_SetConfig+0x510>)
 8003522:	617b      	str	r3, [r7, #20]
        break;
 8003524:	e00c      	b.n	8003540 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe f883 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 800352a:	6178      	str	r0, [r7, #20]
        break;
 800352c:	e008      	b.n	8003540 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e004      	b.n	8003540 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	76bb      	strb	r3, [r7, #26]
        break;
 800353e:	bf00      	nop
    }

    if (pclk != 0U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d018      	beq.n	8003578 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	085a      	lsrs	r2, r3, #1
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	441a      	add	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b0f      	cmp	r3, #15
 800355e:	d909      	bls.n	8003574 <UART_SetConfig+0x4f4>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003566:	d205      	bcs.n	8003574 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e001      	b.n	8003578 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003584:	7ebb      	ldrb	r3, [r7, #26]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	bf00      	nop
 8003590:	00f42400 	.word	0x00f42400

08003594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01a      	beq.n	80036aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003692:	d10a      	bne.n	80036aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036e8:	f7fc ff1a 	bl	8000520 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d10e      	bne.n	800371a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f82d 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e023      	b.n	8003762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d10e      	bne.n	8003746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f817 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00d      	b.n	8003762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b09c      	sub	sp, #112	; 0x70
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	e0a5      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	f000 80a1 	beq.w	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fc fecb 	bl	8000520 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <UART_WaitOnFlagUntilTimeout+0x32>
 8003796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003798:	2b00      	cmp	r3, #0
 800379a:	d13e      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037b0:	667b      	str	r3, [r7, #100]	; 0x64
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e5      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e067      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04f      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003836:	d147      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003840:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
 8003862:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e6      	bne.n	8003842 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	613b      	str	r3, [r7, #16]
   return(result);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	66bb      	str	r3, [r7, #104]	; 0x68
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003894:	623a      	str	r2, [r7, #32]
 8003896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	69f9      	ldr	r1, [r7, #28]
 800389a:	6a3a      	ldr	r2, [r7, #32]
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e010      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	f43f af4a 	beq.w	800377c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3770      	adds	r7, #112	; 0x70
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b097      	sub	sp, #92	; 0x5c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003926:	d10e      	bne.n	8003946 <UART_Start_Receive_IT+0x52>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <UART_Start_Receive_IT+0x48>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003936:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800393a:	e02d      	b.n	8003998 <UART_Start_Receive_IT+0xa4>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003944:	e028      	b.n	8003998 <UART_Start_Receive_IT+0xa4>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10d      	bne.n	800396a <UART_Start_Receive_IT+0x76>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <UART_Start_Receive_IT+0x6c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22ff      	movs	r2, #255	; 0xff
 800395a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800395e:	e01b      	b.n	8003998 <UART_Start_Receive_IT+0xa4>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	227f      	movs	r2, #127	; 0x7f
 8003964:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003968:	e016      	b.n	8003998 <UART_Start_Receive_IT+0xa4>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003972:	d10d      	bne.n	8003990 <UART_Start_Receive_IT+0x9c>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <UART_Start_Receive_IT+0x92>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	227f      	movs	r2, #127	; 0x7f
 8003980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003984:	e008      	b.n	8003998 <UART_Start_Receive_IT+0xa4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	223f      	movs	r2, #63	; 0x3f
 800398a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398e:	e003      	b.n	8003998 <UART_Start_Receive_IT+0xa4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2222      	movs	r2, #34	; 0x22
 80039a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3308      	adds	r3, #8
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	657b      	str	r3, [r7, #84]	; 0x54
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3308      	adds	r3, #8
 80039c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d107      	bne.n	80039f4 <UART_Start_Receive_IT+0x100>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <UART_Start_Receive_IT+0x18c>)
 80039f0:	665a      	str	r2, [r3, #100]	; 0x64
 80039f2:	e002      	b.n	80039fa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <UART_Start_Receive_IT+0x190>)
 80039f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d019      	beq.n	8003a3e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e6      	bne.n	8003a0a <UART_Start_Receive_IT+0x116>
 8003a3c:	e018      	b.n	8003a70 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	6a3a      	ldr	r2, [r7, #32]
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e6      	bne.n	8003a3e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	375c      	adds	r7, #92	; 0x5c
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	08003d2f 	.word	0x08003d2f
 8003a84:	08003bcf 	.word	0x08003bcf

08003a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b095      	sub	sp, #84	; 0x54
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e5      	bne.n	8003ac2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d118      	bne.n	8003b30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f023 0310 	bic.w	r3, r3, #16
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e6      	bne.n	8003afe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b42:	bf00      	nop
 8003b44:	3754      	adds	r7, #84	; 0x54
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff fa71 	bl	8003054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b088      	sub	sp, #32
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	613b      	str	r3, [r7, #16]
   return(result);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fa33 	bl	800302c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc6:	bf00      	nop
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b096      	sub	sp, #88	; 0x58
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be4:	2b22      	cmp	r3, #34	; 0x22
 8003be6:	f040 8094 	bne.w	8003d12 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bf0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bf4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003bf8:	b2d9      	uxtb	r1, r3
 8003bfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	400a      	ands	r2, r1
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d179      	bne.n	8003d26 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c46:	653b      	str	r3, [r7, #80]	; 0x50
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c50:	647b      	str	r3, [r7, #68]	; 0x44
 8003c52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	623b      	str	r3, [r7, #32]
   return(result);
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3308      	adds	r3, #8
 8003c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c84:	633a      	str	r2, [r7, #48]	; 0x30
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d12e      	bne.n	8003d0a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0310 	bic.w	r3, r3, #16
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e6      	bne.n	8003cb2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d103      	bne.n	8003cfa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff f9b0 	bl	8003068 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d08:	e00d      	b.n	8003d26 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff f998 	bl	8003040 <HAL_UART_RxCpltCallback>
}
 8003d10:	e009      	b.n	8003d26 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	8b1b      	ldrh	r3, [r3, #24]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	b292      	uxth	r2, r2
 8003d24:	831a      	strh	r2, [r3, #24]
}
 8003d26:	bf00      	nop
 8003d28:	3758      	adds	r7, #88	; 0x58
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b096      	sub	sp, #88	; 0x58
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d44:	2b22      	cmp	r3, #34	; 0x22
 8003d46:	f040 8094 	bne.w	8003e72 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d50:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d5a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003d5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d62:	4013      	ands	r3, r2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d179      	bne.n	8003e86 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db0:	643b      	str	r3, [r7, #64]	; 0x40
 8003db2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e6      	bne.n	8003d92 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d12e      	bne.n	8003e6a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0310 	bic.w	r3, r3, #16
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6979      	ldr	r1, [r7, #20]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e6      	bne.n	8003e12 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d103      	bne.n	8003e5a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2210      	movs	r2, #16
 8003e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff f900 	bl	8003068 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e68:	e00d      	b.n	8003e86 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff f8e8 	bl	8003040 <HAL_UART_RxCpltCallback>
}
 8003e70:	e009      	b.n	8003e86 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	8b1b      	ldrh	r3, [r3, #24]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0208 	orr.w	r2, r2, #8
 8003e82:	b292      	uxth	r2, r2
 8003e84:	831a      	strh	r2, [r3, #24]
}
 8003e86:	bf00      	nop
 8003e88:	3758      	adds	r7, #88	; 0x58
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb4:	2b84      	cmp	r3, #132	; 0x84
 8003eb6:	d005      	beq.n	8003ec4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003eb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3303      	adds	r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ed6:	f000 fadf 	bl	8004498 <vTaskStartScheduler>
  
  return osOK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	b089      	sub	sp, #36	; 0x24
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d020      	beq.n	8003f34 <osThreadCreate+0x54>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01c      	beq.n	8003f34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685c      	ldr	r4, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681d      	ldr	r5, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691e      	ldr	r6, [r3, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ffc8 	bl	8003ea2 <makeFreeRtosPriority>
 8003f12:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f1c:	9202      	str	r2, [sp, #8]
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	9100      	str	r1, [sp, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4632      	mov	r2, r6
 8003f26:	4629      	mov	r1, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 f8ed 	bl	8004108 <xTaskCreateStatic>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e01c      	b.n	8003f6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685c      	ldr	r4, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f40:	b29e      	uxth	r6, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ffaa 	bl	8003ea2 <makeFreeRtosPriority>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	9200      	str	r2, [sp, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f000 f92f 	bl	80041c2 <xTaskCreate>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d001      	beq.n	8003f6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <osDelay+0x16>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	e000      	b.n	8003f90 <osDelay+0x18>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fa4d 	bl	8004430 <vTaskDelay>
  
  return osOK;
 8003f96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f103 0208 	add.w	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f103 0208 	add.w	r2, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f103 0208 	add.w	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e00c      	b.n	800407c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3308      	adds	r3, #8
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e002      	b.n	8004070 <vListInsert+0x2e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	d2f6      	bcs.n	800406a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6852      	ldr	r2, [r2, #4]
 80040d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d103      	bne.n	80040e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af04      	add	r7, sp, #16
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xTaskCreateStatic+0x46>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	61fb      	str	r3, [r7, #28]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800414e:	2354      	movs	r3, #84	; 0x54
 8004150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b54      	cmp	r3, #84	; 0x54
 8004156:	d00a      	beq.n	800416e <xTaskCreateStatic+0x66>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	61bb      	str	r3, [r7, #24]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800416e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01e      	beq.n	80041b4 <xTaskCreateStatic+0xac>
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f850 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ae:	f000 f8d5 	bl	800435c <prvAddNewTaskToReadyList>
 80041b2:	e001      	b.n	80041b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08c      	sub	sp, #48	; 0x30
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fec6 	bl	8004f68 <pvPortMalloc>
 80041dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041e4:	2054      	movs	r0, #84	; 0x54
 80041e6:	f000 febf 	bl	8004f68 <pvPortMalloc>
 80041ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
 80041f8:	e005      	b.n	8004206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f000 ff80 	bl	8005100 <vPortFree>
 8004200:	e001      	b.n	8004206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	2300      	movs	r3, #0
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f80e 	bl	800424c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004230:	69f8      	ldr	r0, [r7, #28]
 8004232:	f000 f893 	bl	800435c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e002      	b.n	8004242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004242:	69bb      	ldr	r3, [r7, #24]
	}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004264:	3b01      	subs	r3, #1
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f023 0307 	bic.w	r3, r3, #7
 8004272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <prvInitialiseNewTask+0x48>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	617b      	str	r3, [r7, #20]
}
 8004290:	bf00      	nop
 8004292:	e7fe      	b.n	8004292 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01f      	beq.n	80042da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e012      	b.n	80042c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	7819      	ldrb	r1, [r3, #0]
 80042a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	3334      	adds	r3, #52	; 0x34
 80042b0:	460a      	mov	r2, r1
 80042b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d9e9      	bls.n	80042a0 <prvInitialiseNewTask+0x54>
 80042cc:	e000      	b.n	80042d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80042ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d8:	e003      	b.n	80042e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d901      	bls.n	80042ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042e8:	2306      	movs	r3, #6
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	2200      	movs	r2, #0
 80042fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	3304      	adds	r3, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe6c 	bl	8003fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	3318      	adds	r3, #24
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fe67 	bl	8003fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	f1c3 0207 	rsb	r2, r3, #7
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2200      	movs	r2, #0
 800432c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	69b8      	ldr	r0, [r7, #24]
 800433c:	f000 fc06 	bl	8004b4c <pxPortInitialiseStack>
 8004340:	4602      	mov	r2, r0
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004352:	bf00      	nop
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004364:	f000 fd1e 	bl	8004da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004368:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <prvAddNewTaskToReadyList+0xb8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <prvAddNewTaskToReadyList+0xb8>)
 8004370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <prvAddNewTaskToReadyList+0xbc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437a:	4a27      	ldr	r2, [pc, #156]	; (8004418 <prvAddNewTaskToReadyList+0xbc>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <prvAddNewTaskToReadyList+0xb8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d110      	bne.n	80043aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004388:	f000 fabc 	bl	8004904 <prvInitialiseTaskLists>
 800438c:	e00d      	b.n	80043aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <prvAddNewTaskToReadyList+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <prvAddNewTaskToReadyList+0xbc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d802      	bhi.n	80043aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a4:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <prvAddNewTaskToReadyList+0xbc>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <prvAddNewTaskToReadyList+0xc4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3301      	adds	r3, #1
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <prvAddNewTaskToReadyList+0xc4>)
 80043b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <prvAddNewTaskToReadyList+0xc8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <prvAddNewTaskToReadyList+0xc8>)
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <prvAddNewTaskToReadyList+0xcc>)
 80043d4:	441a      	add	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7ff fe0c 	bl	8003ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043e2:	f000 fd0f 	bl	8004e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043e6:	4b0d      	ldr	r3, [pc, #52]	; (800441c <prvAddNewTaskToReadyList+0xc0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00e      	beq.n	800440c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <prvAddNewTaskToReadyList+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d207      	bcs.n	800440c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <prvAddNewTaskToReadyList+0xd0>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	2000012c 	.word	0x2000012c
 8004418:	2000002c 	.word	0x2000002c
 800441c:	20000138 	.word	0x20000138
 8004420:	20000148 	.word	0x20000148
 8004424:	20000134 	.word	0x20000134
 8004428:	20000030 	.word	0x20000030
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <vTaskDelay+0x60>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <vTaskDelay+0x30>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004460:	f000 f87a 	bl	8004558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004464:	2100      	movs	r1, #0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fb0a 	bl	8004a80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800446c:	f000 f882 	bl	8004574 <xTaskResumeAll>
 8004470:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <vTaskDelay+0x64>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000154 	.word	0x20000154
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044a6:	463a      	mov	r2, r7
 80044a8:	1d39      	adds	r1, r7, #4
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 ff44 	bl	800533c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	9202      	str	r2, [sp, #8]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	460a      	mov	r2, r1
 80044c6:	491e      	ldr	r1, [pc, #120]	; (8004540 <vTaskStartScheduler+0xa8>)
 80044c8:	481e      	ldr	r0, [pc, #120]	; (8004544 <vTaskStartScheduler+0xac>)
 80044ca:	f7ff fe1d 	bl	8004108 <xTaskCreateStatic>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <vTaskStartScheduler+0xb0>)
 80044d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044d4:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <vTaskStartScheduler+0xb0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044dc:	2301      	movs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e001      	b.n	80044e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d116      	bne.n	800451a <vTaskStartScheduler+0x82>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	613b      	str	r3, [r7, #16]
}
 80044fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004500:	4b12      	ldr	r3, [pc, #72]	; (800454c <vTaskStartScheduler+0xb4>)
 8004502:	f04f 32ff 	mov.w	r2, #4294967295
 8004506:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <vTaskStartScheduler+0xb8>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <vTaskStartScheduler+0xbc>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004514:	f000 fba4 	bl	8004c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004518:	e00e      	b.n	8004538 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d10a      	bne.n	8004538 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60fb      	str	r3, [r7, #12]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vTaskStartScheduler+0x9e>
}
 8004538:	bf00      	nop
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	08005a58 	.word	0x08005a58
 8004544:	080048d5 	.word	0x080048d5
 8004548:	20000150 	.word	0x20000150
 800454c:	2000014c 	.word	0x2000014c
 8004550:	20000138 	.word	0x20000138
 8004554:	20000130 	.word	0x20000130

08004558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <vTaskSuspendAll+0x18>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a03      	ldr	r2, [pc, #12]	; (8004570 <vTaskSuspendAll+0x18>)
 8004564:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000154 	.word	0x20000154

08004574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004582:	4b41      	ldr	r3, [pc, #260]	; (8004688 <xTaskResumeAll+0x114>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	603b      	str	r3, [r7, #0]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045a0:	f000 fc00 	bl	8004da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045a4:	4b38      	ldr	r3, [pc, #224]	; (8004688 <xTaskResumeAll+0x114>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4a37      	ldr	r2, [pc, #220]	; (8004688 <xTaskResumeAll+0x114>)
 80045ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ae:	4b36      	ldr	r3, [pc, #216]	; (8004688 <xTaskResumeAll+0x114>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d161      	bne.n	800467a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b6:	4b35      	ldr	r3, [pc, #212]	; (800468c <xTaskResumeAll+0x118>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d05d      	beq.n	800467a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045be:	e02e      	b.n	800461e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c0:	4b33      	ldr	r3, [pc, #204]	; (8004690 <xTaskResumeAll+0x11c>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3318      	adds	r3, #24
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fd71 	bl	80040b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fd6c 	bl	80040b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <xTaskResumeAll+0x120>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <xTaskResumeAll+0x120>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a27      	ldr	r2, [pc, #156]	; (8004698 <xTaskResumeAll+0x124>)
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7ff fcf8 	bl	8003ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <xTaskResumeAll+0x128>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <xTaskResumeAll+0x12c>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <xTaskResumeAll+0x11c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1cc      	bne.n	80045c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800462c:	f000 fa08 	bl	8004a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004630:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <xTaskResumeAll+0x130>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d010      	beq.n	800465e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800463c:	f000 f836 	bl	80046ac <xTaskIncrementTick>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <xTaskResumeAll+0x12c>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f1      	bne.n	800463c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <xTaskResumeAll+0x130>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <xTaskResumeAll+0x12c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <xTaskResumeAll+0x134>)
 800466c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800467a:	f000 fbc3 	bl	8004e04 <vPortExitCritical>

	return xAlreadyYielded;
 800467e:	68bb      	ldr	r3, [r7, #8]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000154 	.word	0x20000154
 800468c:	2000012c 	.word	0x2000012c
 8004690:	200000ec 	.word	0x200000ec
 8004694:	20000134 	.word	0x20000134
 8004698:	20000030 	.word	0x20000030
 800469c:	2000002c 	.word	0x2000002c
 80046a0:	20000140 	.word	0x20000140
 80046a4:	2000013c 	.word	0x2000013c
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b6:	4b4e      	ldr	r3, [pc, #312]	; (80047f0 <xTaskIncrementTick+0x144>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 808e 	bne.w	80047dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046c0:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <xTaskIncrementTick+0x148>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c8:	4a4a      	ldr	r2, [pc, #296]	; (80047f4 <xTaskIncrementTick+0x148>)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d120      	bne.n	8004716 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d4:	4b48      	ldr	r3, [pc, #288]	; (80047f8 <xTaskIncrementTick+0x14c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	603b      	str	r3, [r7, #0]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xTaskIncrementTick+0x46>
 80046f4:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <xTaskIncrementTick+0x14c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4b40      	ldr	r3, [pc, #256]	; (80047fc <xTaskIncrementTick+0x150>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a3e      	ldr	r2, [pc, #248]	; (80047f8 <xTaskIncrementTick+0x14c>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4a3e      	ldr	r2, [pc, #248]	; (80047fc <xTaskIncrementTick+0x150>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <xTaskIncrementTick+0x154>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <xTaskIncrementTick+0x154>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	f000 f995 	bl	8004a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <xTaskIncrementTick+0x158>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d348      	bcc.n	80047b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004720:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <xTaskIncrementTick+0x14c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <xTaskIncrementTick+0x158>)
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	601a      	str	r2, [r3, #0]
					break;
 8004732:	e03e      	b.n	80047b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004734:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <xTaskIncrementTick+0x14c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d203      	bcs.n	8004754 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <xTaskIncrementTick+0x158>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004752:	e02e      	b.n	80047b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fcab 	bl	80040b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fca2 	bl	80040b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	4b23      	ldr	r3, [pc, #140]	; (8004808 <xTaskIncrementTick+0x15c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4313      	orrs	r3, r2
 800477e:	4a22      	ldr	r2, [pc, #136]	; (8004808 <xTaskIncrementTick+0x15c>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4a1f      	ldr	r2, [pc, #124]	; (800480c <xTaskIncrementTick+0x160>)
 8004790:	441a      	add	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7ff fc2e 	bl	8003ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <xTaskIncrementTick+0x164>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d3b9      	bcc.n	8004720 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b0:	e7b6      	b.n	8004720 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <xTaskIncrementTick+0x164>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b8:	4914      	ldr	r1, [pc, #80]	; (800480c <xTaskIncrementTick+0x160>)
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d901      	bls.n	80047ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80047ca:	2301      	movs	r3, #1
 80047cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <xTaskIncrementTick+0x168>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e004      	b.n	80047e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <xTaskIncrementTick+0x16c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <xTaskIncrementTick+0x16c>)
 80047e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047e6:	697b      	ldr	r3, [r7, #20]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000154 	.word	0x20000154
 80047f4:	20000130 	.word	0x20000130
 80047f8:	200000e4 	.word	0x200000e4
 80047fc:	200000e8 	.word	0x200000e8
 8004800:	20000144 	.word	0x20000144
 8004804:	2000014c 	.word	0x2000014c
 8004808:	20000134 	.word	0x20000134
 800480c:	20000030 	.word	0x20000030
 8004810:	2000002c 	.word	0x2000002c
 8004814:	20000140 	.word	0x20000140
 8004818:	2000013c 	.word	0x2000013c

0800481c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004822:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <vTaskSwitchContext+0xa4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800482a:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <vTaskSwitchContext+0xa8>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004830:	e03f      	b.n	80048b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <vTaskSwitchContext+0xa8>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004838:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <vTaskSwitchContext+0xac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	f1c3 031f 	rsb	r3, r3, #31
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	491f      	ldr	r1, [pc, #124]	; (80048cc <vTaskSwitchContext+0xb0>)
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vTaskSwitchContext+0x5a>
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <vTaskSwitchContext+0xb0>)
 8004884:	4413      	add	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3308      	adds	r3, #8
 800489a:	429a      	cmp	r2, r3
 800489c:	d104      	bne.n	80048a8 <vTaskSwitchContext+0x8c>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <vTaskSwitchContext+0xb4>)
 80048b0:	6013      	str	r3, [r2, #0]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000154 	.word	0x20000154
 80048c4:	20000140 	.word	0x20000140
 80048c8:	20000134 	.word	0x20000134
 80048cc:	20000030 	.word	0x20000030
 80048d0:	2000002c 	.word	0x2000002c

080048d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048dc:	f000 f852 	bl	8004984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <prvIdleTask+0x28>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d9f9      	bls.n	80048dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <prvIdleTask+0x2c>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048f8:	e7f0      	b.n	80048dc <prvIdleTask+0x8>
 80048fa:	bf00      	nop
 80048fc:	20000030 	.word	0x20000030
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	e00c      	b.n	800492a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <prvInitialiseTaskLists+0x60>)
 800491c:	4413      	add	r3, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fb3e 	bl	8003fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3301      	adds	r3, #1
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b06      	cmp	r3, #6
 800492e:	d9ef      	bls.n	8004910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004930:	480d      	ldr	r0, [pc, #52]	; (8004968 <prvInitialiseTaskLists+0x64>)
 8004932:	f7ff fb35 	bl	8003fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004936:	480d      	ldr	r0, [pc, #52]	; (800496c <prvInitialiseTaskLists+0x68>)
 8004938:	f7ff fb32 	bl	8003fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800493c:	480c      	ldr	r0, [pc, #48]	; (8004970 <prvInitialiseTaskLists+0x6c>)
 800493e:	f7ff fb2f 	bl	8003fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004942:	480c      	ldr	r0, [pc, #48]	; (8004974 <prvInitialiseTaskLists+0x70>)
 8004944:	f7ff fb2c 	bl	8003fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004948:	480b      	ldr	r0, [pc, #44]	; (8004978 <prvInitialiseTaskLists+0x74>)
 800494a:	f7ff fb29 	bl	8003fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <prvInitialiseTaskLists+0x78>)
 8004950:	4a05      	ldr	r2, [pc, #20]	; (8004968 <prvInitialiseTaskLists+0x64>)
 8004952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <prvInitialiseTaskLists+0x7c>)
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <prvInitialiseTaskLists+0x68>)
 8004958:	601a      	str	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000030 	.word	0x20000030
 8004968:	200000bc 	.word	0x200000bc
 800496c:	200000d0 	.word	0x200000d0
 8004970:	200000ec 	.word	0x200000ec
 8004974:	20000100 	.word	0x20000100
 8004978:	20000118 	.word	0x20000118
 800497c:	200000e4 	.word	0x200000e4
 8004980:	200000e8 	.word	0x200000e8

08004984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800498a:	e019      	b.n	80049c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800498c:	f000 fa0a 	bl	8004da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004990:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <prvCheckTasksWaitingTermination+0x50>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fb89 	bl	80040b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <prvCheckTasksWaitingTermination+0x54>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <prvCheckTasksWaitingTermination+0x54>)
 80049aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <prvCheckTasksWaitingTermination+0x58>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <prvCheckTasksWaitingTermination+0x58>)
 80049b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049b6:	f000 fa25 	bl	8004e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f810 	bl	80049e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <prvCheckTasksWaitingTermination+0x58>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e1      	bne.n	800498c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000100 	.word	0x20000100
 80049d8:	2000012c 	.word	0x2000012c
 80049dc:	20000114 	.word	0x20000114

080049e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fb82 	bl	8005100 <vPortFree>
				vPortFree( pxTCB );
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb7f 	bl	8005100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a02:	e018      	b.n	8004a36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d103      	bne.n	8004a16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fb76 	bl	8005100 <vPortFree>
	}
 8004a14:	e00f      	b.n	8004a36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d00a      	beq.n	8004a36 <prvDeleteTCB+0x56>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60fb      	str	r3, [r7, #12]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <prvDeleteTCB+0x54>
	}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <prvResetNextTaskUnblockTime+0x38>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <prvResetNextTaskUnblockTime+0x3c>)
 8004a52:	f04f 32ff 	mov.w	r2, #4294967295
 8004a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a58:	e008      	b.n	8004a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <prvResetNextTaskUnblockTime+0x38>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <prvResetNextTaskUnblockTime+0x3c>)
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	200000e4 	.word	0x200000e4
 8004a7c:	2000014c 	.word	0x2000014c

08004a80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a8a:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a90:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fb0c 	bl	80040b4 <uxListRemove>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ab8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d10a      	bne.n	8004ad8 <prvAddCurrentTaskToDelayedList+0x58>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	481a      	ldr	r0, [pc, #104]	; (8004b3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ad2:	f7ff fa92 	bl	8003ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ad6:	e026      	b.n	8004b26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d209      	bcs.n	8004b04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af0:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f7ff faa0 	bl	8004042 <vListInsert>
}
 8004b02:	e010      	b.n	8004b26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7ff fa96 	bl	8004042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d202      	bcs.n	8004b26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6013      	str	r3, [r2, #0]
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000130 	.word	0x20000130
 8004b34:	2000002c 	.word	0x2000002c
 8004b38:	20000134 	.word	0x20000134
 8004b3c:	20000118 	.word	0x20000118
 8004b40:	200000e8 	.word	0x200000e8
 8004b44:	200000e4 	.word	0x200000e4
 8004b48:	2000014c 	.word	0x2000014c

08004b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3b04      	subs	r3, #4
 8004b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <pxPortInitialiseStack+0x64>)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3b14      	subs	r3, #20
 8004b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b04      	subs	r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f06f 0202 	mvn.w	r2, #2
 8004b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b20      	subs	r3, #32
 8004ba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	08004bb5 	.word	0x08004bb5

08004bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <prvTaskExitError+0x54>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d00a      	beq.n	8004bde <prvTaskExitError+0x2a>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <prvTaskExitError+0x28>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60bb      	str	r3, [r7, #8]
}
 8004bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bf2:	bf00      	nop
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0fc      	beq.n	8004bf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20000008 	.word	0x20000008
 8004c0c:	00000000 	.word	0x00000000

08004c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <pxCurrentTCBConst2>)
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	6808      	ldr	r0, [r1, #0]
 8004c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f380 8809 	msr	PSP, r0
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8811 	msr	BASEPRI, r0
 8004c2a:	4770      	bx	lr
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst2>:
 8004c30:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c38:	4808      	ldr	r0, [pc, #32]	; (8004c5c <prvPortStartFirstTask+0x24>)
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	f380 8808 	msr	MSP, r0
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8814 	msr	CONTROL, r0
 8004c4a:	b662      	cpsie	i
 8004c4c:	b661      	cpsie	f
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	df00      	svc	0
 8004c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c5a:	bf00      	nop
 8004c5c:	e000ed08 	.word	0xe000ed08

08004c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c66:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <xPortStartScheduler+0x120>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a46      	ldr	r2, [pc, #280]	; (8004d84 <xPortStartScheduler+0x124>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10a      	bne.n	8004c86 <xPortStartScheduler+0x26>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c86:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <xPortStartScheduler+0x120>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <xPortStartScheduler+0x128>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10a      	bne.n	8004ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <xPortStartScheduler+0x12c>)
 8004ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <xPortStartScheduler+0x130>)
 8004ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd4:	e009      	b.n	8004cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d0ef      	beq.n	8004cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1c3 0307 	rsb	r3, r3, #7
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d00a      	beq.n	8004d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d4e:	f000 f8dd 	bl	8004f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <xPortStartScheduler+0x13c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d58:	f000 f8fc 	bl	8004f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d5c:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <xPortStartScheduler+0x140>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <xPortStartScheduler+0x140>)
 8004d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d68:	f7ff ff66 	bl	8004c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d6c:	f7ff fd56 	bl	800481c <vTaskSwitchContext>
	prvTaskExitError();
 8004d70:	f7ff ff20 	bl	8004bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	e000ed00 	.word	0xe000ed00
 8004d84:	410fc271 	.word	0x410fc271
 8004d88:	410fc270 	.word	0x410fc270
 8004d8c:	e000e400 	.word	0xe000e400
 8004d90:	20000158 	.word	0x20000158
 8004d94:	2000015c 	.word	0x2000015c
 8004d98:	e000ed20 	.word	0xe000ed20
 8004d9c:	20000008 	.word	0x20000008
 8004da0:	e000ef34 	.word	0xe000ef34

08004da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	607b      	str	r3, [r7, #4]
}
 8004dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10f      	bne.n	8004df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortEnterCritical+0x5c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	603b      	str	r3, [r7, #0]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <vPortEnterCritical+0x4a>
	}
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	20000008 	.word	0x20000008
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <vPortExitCritical+0x50>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <vPortExitCritical+0x24>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <vPortExitCritical+0x50>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <vPortExitCritical+0x50>)
 8004e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <vPortExitCritical+0x50>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <vPortExitCritical+0x42>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000008 	.word	0x20000008
	...

08004e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e60:	f3ef 8009 	mrs	r0, PSP
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <pxCurrentTCBConst>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f01e 0f10 	tst.w	lr, #16
 8004e70:	bf08      	it	eq
 8004e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7a:	6010      	str	r0, [r2, #0]
 8004e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e84:	f380 8811 	msr	BASEPRI, r0
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f7ff fcc4 	bl	800481c <vTaskSwitchContext>
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f380 8811 	msr	BASEPRI, r0
 8004e9c:	bc09      	pop	{r0, r3}
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	6808      	ldr	r0, [r1, #0]
 8004ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea6:	f01e 0f10 	tst.w	lr, #16
 8004eaa:	bf08      	it	eq
 8004eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004eb0:	f380 8809 	msr	PSP, r0
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst>:
 8004ec0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ee2:	f7ff fbe3 	bl	80046ac <xTaskIncrementTick>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <SysTick_Handler+0x40>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f383 8811 	msr	BASEPRI, r3
}
 8004efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <vPortSetupTimerInterrupt+0x38>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <vPortSetupTimerInterrupt+0x3c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <vPortSetupTimerInterrupt+0x40>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <vPortSetupTimerInterrupt+0x44>)
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010
 8004f44:	e000e018 	.word	0xe000e018
 8004f48:	2000000c 	.word	0x2000000c
 8004f4c:	10624dd3 	.word	0x10624dd3
 8004f50:	e000e014 	.word	0xe000e014

08004f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f64 <vPortEnableVFP+0x10>
 8004f58:	6801      	ldr	r1, [r0, #0]
 8004f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f5e:	6001      	str	r1, [r0, #0]
 8004f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f62:	bf00      	nop
 8004f64:	e000ed88 	.word	0xe000ed88

08004f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f74:	f7ff faf0 	bl	8004558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f78:	4b5b      	ldr	r3, [pc, #364]	; (80050e8 <pvPortMalloc+0x180>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f80:	f000 f920 	bl	80051c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <pvPortMalloc+0x184>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 8093 	bne.w	80050b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01d      	beq.n	8004fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f98:	2208      	movs	r2, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d014      	beq.n	8004fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f023 0307 	bic.w	r3, r3, #7
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	617b      	str	r3, [r7, #20]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d06e      	beq.n	80050b8 <pvPortMalloc+0x150>
 8004fda:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <pvPortMalloc+0x188>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d869      	bhi.n	80050b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fe4:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <pvPortMalloc+0x18c>)
 8004fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <pvPortMalloc+0x18c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fee:	e004      	b.n	8004ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d903      	bls.n	800500c <pvPortMalloc+0xa4>
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f1      	bne.n	8004ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <pvPortMalloc+0x180>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	429a      	cmp	r2, r3
 8005014:	d050      	beq.n	80050b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2208      	movs	r2, #8
 800501c:	4413      	add	r3, r2
 800501e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	2308      	movs	r3, #8
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	429a      	cmp	r2, r3
 8005036:	d91f      	bls.n	8005078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <pvPortMalloc+0xf8>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	613b      	str	r3, [r7, #16]
}
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005072:	69b8      	ldr	r0, [r7, #24]
 8005074:	f000 f908 	bl	8005288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <pvPortMalloc+0x188>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <pvPortMalloc+0x188>)
 8005084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <pvPortMalloc+0x188>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <pvPortMalloc+0x190>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d203      	bcs.n	800509a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <pvPortMalloc+0x188>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <pvPortMalloc+0x190>)
 8005098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <pvPortMalloc+0x184>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <pvPortMalloc+0x194>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3301      	adds	r3, #1
 80050b4:	4a11      	ldr	r2, [pc, #68]	; (80050fc <pvPortMalloc+0x194>)
 80050b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050b8:	f7ff fa5c 	bl	8004574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <pvPortMalloc+0x174>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60fb      	str	r3, [r7, #12]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <pvPortMalloc+0x172>
	return pvReturn;
 80050dc:	69fb      	ldr	r3, [r7, #28]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	; 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000d20 	.word	0x20000d20
 80050ec:	20000d34 	.word	0x20000d34
 80050f0:	20000d24 	.word	0x20000d24
 80050f4:	20000d18 	.word	0x20000d18
 80050f8:	20000d28 	.word	0x20000d28
 80050fc:	20000d2c 	.word	0x20000d2c

08005100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04d      	beq.n	80051ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005112:	2308      	movs	r3, #8
 8005114:	425b      	negs	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <vPortFree+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <vPortFree+0x44>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	60fb      	str	r3, [r7, #12]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <vPortFree+0x62>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	60bb      	str	r3, [r7, #8]
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <vPortFree+0xb8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01e      	beq.n	80051ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11a      	bne.n	80051ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <vPortFree+0xb8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	43db      	mvns	r3, r3
 8005182:	401a      	ands	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005188:	f7ff f9e6 	bl	8004558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <vPortFree+0xbc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4413      	add	r3, r2
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <vPortFree+0xbc>)
 8005198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800519a:	6938      	ldr	r0, [r7, #16]
 800519c:	f000 f874 	bl	8005288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <vPortFree+0xc0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	4a06      	ldr	r2, [pc, #24]	; (80051c0 <vPortFree+0xc0>)
 80051a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051aa:	f7ff f9e3 	bl	8004574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051ae:	bf00      	nop
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000d34 	.word	0x20000d34
 80051bc:	20000d24 	.word	0x20000d24
 80051c0:	20000d30 	.word	0x20000d30

080051c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80051ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051d0:	4b27      	ldr	r3, [pc, #156]	; (8005270 <prvHeapInit+0xac>)
 80051d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3307      	adds	r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0307 	bic.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <prvHeapInit+0xac>)
 80051f4:	4413      	add	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051fc:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <prvHeapInit+0xb0>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <prvHeapInit+0xb0>)
 8005204:	2200      	movs	r2, #0
 8005206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4413      	add	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005210:	2208      	movs	r2, #8
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0307 	bic.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <prvHeapInit+0xb4>)
 8005224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <prvHeapInit+0xb4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <prvHeapInit+0xb4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <prvHeapInit+0xb4>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <prvHeapInit+0xb8>)
 8005252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a09      	ldr	r2, [pc, #36]	; (8005280 <prvHeapInit+0xbc>)
 800525a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <prvHeapInit+0xc0>)
 800525e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000160 	.word	0x20000160
 8005274:	20000d18 	.word	0x20000d18
 8005278:	20000d20 	.word	0x20000d20
 800527c:	20000d28 	.word	0x20000d28
 8005280:	20000d24 	.word	0x20000d24
 8005284:	20000d34 	.word	0x20000d34

08005288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005290:	4b28      	ldr	r3, [pc, #160]	; (8005334 <prvInsertBlockIntoFreeList+0xac>)
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e002      	b.n	800529c <prvInsertBlockIntoFreeList+0x14>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d8f7      	bhi.n	8005296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4413      	add	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d108      	bne.n	80052ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	441a      	add	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d118      	bne.n	8005310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b15      	ldr	r3, [pc, #84]	; (8005338 <prvInsertBlockIntoFreeList+0xb0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d00d      	beq.n	8005306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e008      	b.n	8005318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvInsertBlockIntoFreeList+0xb0>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e003      	b.n	8005318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d002      	beq.n	8005326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000d18 	.word	0x20000d18
 8005338:	20000d20 	.word	0x20000d20

0800533c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <vApplicationGetIdleTaskMemory+0x2c>)
 800534c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a06      	ldr	r2, [pc, #24]	; (800536c <vApplicationGetIdleTaskMemory+0x30>)
 8005352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2280      	movs	r2, #128	; 0x80
 8005358:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000d38 	.word	0x20000d38
 800536c:	20000d8c 	.word	0x20000d8c

08005370 <send_deftask1>:
	uint8_t data[] ="1sec";
	HAL_UART_Transmit(&huart1, data, sizeof(data), 50);

}
void send_deftask1 (void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
	uint8_t data1[] ="5sec";
 8005376:	4a08      	ldr	r2, [pc, #32]	; (8005398 <send_deftask1+0x28>)
 8005378:	463b      	mov	r3, r7
 800537a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800537e:	6018      	str	r0, [r3, #0]
 8005380:	3304      	adds	r3, #4
 8005382:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart1, data1, sizeof(data1), 50);
 8005384:	4639      	mov	r1, r7
 8005386:	2332      	movs	r3, #50	; 0x32
 8005388:	2205      	movs	r2, #5
 800538a:	4804      	ldr	r0, [pc, #16]	; (800539c <send_deftask1+0x2c>)
 800538c:	f7fd fa82 	bl	8002894 <HAL_UART_Transmit>

}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	08005a84 	.word	0x08005a84
 800539c:	20000fa0 	.word	0x20000fa0

080053a0 <send_deftask3>:
void send_deftask3 (void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
	uint8_t data2[] ="8sec";
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <send_deftask3+0x28>)
 80053a8:	463b      	mov	r3, r7
 80053aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ae:	6018      	str	r0, [r3, #0]
 80053b0:	3304      	adds	r3, #4
 80053b2:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart1, data2, sizeof(data2), 50);
 80053b4:	4639      	mov	r1, r7
 80053b6:	2332      	movs	r3, #50	; 0x32
 80053b8:	2205      	movs	r2, #5
 80053ba:	4804      	ldr	r0, [pc, #16]	; (80053cc <send_deftask3+0x2c>)
 80053bc:	f7fd fa6a 	bl	8002894 <HAL_UART_Transmit>
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	08005a8c 	.word	0x08005a8c
 80053cc:	20000fa0 	.word	0x20000fa0

080053d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053d0:	b5b0      	push	{r4, r5, r7, lr}
 80053d2:	b096      	sub	sp, #88	; 0x58
 80053d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053d6:	f7fb f877 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053da:	f000 f853 	bl	8005484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053de:	f000 f8d1 	bl	8005584 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80053e2:	f000 f89f 	bl	8005524 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, RxData, sizeof(RxData)); // receive data
 80053e6:	2208      	movs	r2, #8
 80053e8:	491e      	ldr	r1, [pc, #120]	; (8005464 <main+0x94>)
 80053ea:	481f      	ldr	r0, [pc, #124]	; (8005468 <main+0x98>)
 80053ec:	f7fd fae6 	bl	80029bc <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <main+0x9c>)
 80053f2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80053f6:	461d      	mov	r5, r3
 80053f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005404:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fd68 	bl	8003ee0 <osThreadCreate>
 8005410:	4603      	mov	r3, r0
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <main+0xa0>)
 8005414:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <main+0xa4>)
 8005418:	f107 0420 	add.w	r4, r7, #32
 800541c:	461d      	mov	r5, r3
 800541e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005422:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800542a:	f107 0320 	add.w	r3, r7, #32
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe fd55 	bl	8003ee0 <osThreadCreate>
 8005436:	4603      	mov	r3, r0
 8005438:	4a0f      	ldr	r2, [pc, #60]	; (8005478 <main+0xa8>)
 800543a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // define thread
     osThreadDef(Task3, Task3_init, osPriorityBelowNormal, 0, 128);
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <main+0xac>)
 800543e:	1d3c      	adds	r4, r7, #4
 8005440:	461d      	mov	r5, r3
 8005442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005446:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800544a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     //create thread
     Task03Handle = osThreadCreate(osThread(Task3), NULL);
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fd44 	bl	8003ee0 <osThreadCreate>
 8005458:	4603      	mov	r3, r0
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <main+0xb0>)
 800545c:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800545e:	f7fe fd38 	bl	8003ed2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005462:	e7fe      	b.n	8005462 <main+0x92>
 8005464:	2000107c 	.word	0x2000107c
 8005468:	20000fa0 	.word	0x20000fa0
 800546c:	08005a94 	.word	0x08005a94
 8005470:	20000f98 	.word	0x20000f98
 8005474:	08005ab0 	.word	0x08005ab0
 8005478:	20000f94 	.word	0x20000f94
 800547c:	08005acc 	.word	0x08005acc
 8005480:	20001024 	.word	0x20001024

08005484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b096      	sub	sp, #88	; 0x58
 8005488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800548a:	f107 0314 	add.w	r3, r7, #20
 800548e:	2244      	movs	r2, #68	; 0x44
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f000 facc 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005498:	463b      	mov	r3, r7
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	609a      	str	r2, [r3, #8]
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80054a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80054aa:	f7fb fb91 	bl	8000bd0 <HAL_PWREx_ControlVoltageScaling>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80054b4:	f000 f8f8 	bl	80056a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80054b8:	2301      	movs	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054c2:	2302      	movs	r3, #2
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054c6:	2303      	movs	r3, #3
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80054ce:	2314      	movs	r3, #20
 80054d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80054d2:	2307      	movs	r3, #7
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80054d6:	2302      	movs	r3, #2
 80054d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80054da:	2302      	movs	r3, #2
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054de:	f107 0314 	add.w	r3, r7, #20
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fb fbca 	bl	8000c7c <HAL_RCC_OscConfig>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80054ee:	f000 f8db 	bl	80056a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054f2:	230f      	movs	r3, #15
 80054f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054f6:	2303      	movs	r3, #3
 80054f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005506:	463b      	mov	r3, r7
 8005508:	2104      	movs	r1, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f7fb ff90 	bl	8001430 <HAL_RCC_ClockConfig>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005516:	f000 f8c7 	bl	80056a8 <Error_Handler>
  }
}
 800551a:	bf00      	nop
 800551c:	3758      	adds	r7, #88	; 0x58
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005528:	4b14      	ldr	r3, [pc, #80]	; (800557c <MX_USART1_UART_Init+0x58>)
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <MX_USART1_UART_Init+0x5c>)
 800552c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <MX_USART1_UART_Init+0x58>)
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005542:	4b0e      	ldr	r3, [pc, #56]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005544:	2200      	movs	r2, #0
 8005546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <MX_USART1_UART_Init+0x58>)
 800554a:	220c      	movs	r2, #12
 800554c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005550:	2200      	movs	r2, #0
 8005552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005556:	2200      	movs	r2, #0
 8005558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <MX_USART1_UART_Init+0x58>)
 800555c:	2200      	movs	r2, #0
 800555e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005562:	2200      	movs	r2, #0
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005566:	4805      	ldr	r0, [pc, #20]	; (800557c <MX_USART1_UART_Init+0x58>)
 8005568:	f7fd f946 	bl	80027f8 <HAL_UART_Init>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005572:	f000 f899 	bl	80056a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000fa0 	.word	0x20000fa0
 8005580:	40013800 	.word	0x40013800

08005584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800558a:	f107 030c 	add.w	r3, r7, #12
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	60da      	str	r2, [r3, #12]
 8005598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800559a:	4b18      	ldr	r3, [pc, #96]	; (80055fc <MX_GPIO_Init+0x78>)
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	4a17      	ldr	r2, [pc, #92]	; (80055fc <MX_GPIO_Init+0x78>)
 80055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <MX_GPIO_Init+0x78>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <MX_GPIO_Init+0x78>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	4a11      	ldr	r2, [pc, #68]	; (80055fc <MX_GPIO_Init+0x78>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <MX_GPIO_Init+0x78>)
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2103      	movs	r1, #3
 80055ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055d2:	f7fb fabd 	bl	8000b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055d6:	2303      	movs	r3, #3
 80055d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055da:	2301      	movs	r3, #1
 80055dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e6:	f107 030c 	add.w	r3, r7, #12
 80055ea:	4619      	mov	r1, r3
 80055ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055f0:	f7fb f904 	bl	80007fc <HAL_GPIO_Init>

}
 80055f4:	bf00      	nop
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000

08005600 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8005608:	2101      	movs	r1, #1
 800560a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800560e:	f7fb fab7 	bl	8000b80 <HAL_GPIO_TogglePin>
	  if(ECU1_flag == 1)
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <StartDefaultTask+0x40>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10d      	bne.n	8005636 <StartDefaultTask+0x36>
	  {
		  ECU1_flag =0;
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <StartDefaultTask+0x40>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, ECU1_data, sizeof(ECU1_data), 50);
 8005620:	2332      	movs	r3, #50	; 0x32
 8005622:	2208      	movs	r2, #8
 8005624:	4907      	ldr	r1, [pc, #28]	; (8005644 <StartDefaultTask+0x44>)
 8005626:	4808      	ldr	r0, [pc, #32]	; (8005648 <StartDefaultTask+0x48>)
 8005628:	f7fd f934 	bl	8002894 <HAL_UART_Transmit>

	  //send_deftask();
	  memset(ECU1_data, 0, sizeof(ECU1_data));
 800562c:	2208      	movs	r2, #8
 800562e:	2100      	movs	r1, #0
 8005630:	4804      	ldr	r0, [pc, #16]	; (8005644 <StartDefaultTask+0x44>)
 8005632:	f000 f9fd 	bl	8005a30 <memset>
	  }
    osDelay(1000);
 8005636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800563a:	f7fe fc9d 	bl	8003f78 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800563e:	e7e3      	b.n	8005608 <StartDefaultTask+0x8>
 8005640:	20000f9c 	.word	0x20000f9c
 8005644:	20001074 	.word	0x20001074
 8005648:	20000fa0 	.word	0x20000fa0

0800564c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8005654:	2102      	movs	r1, #2
 8005656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800565a:	f7fb fa91 	bl	8000b80 <HAL_GPIO_TogglePin>
	  send_deftask1();
 800565e:	f7ff fe87 	bl	8005370 <send_deftask1>
    osDelay(2000);
 8005662:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005666:	f7fe fc87 	bl	8003f78 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800566a:	e7f3      	b.n	8005654 <StartTask02+0x8>

0800566c <Task3_init>:
  }
  /* USER CODE END StartTask02 */
}

void Task3_init(void const * argument)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);

	  send_deftask3();
 8005674:	f7ff fe94 	bl	80053a0 <send_deftask3>
    osDelay(3000);
 8005678:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800567c:	f7fe fc7c 	bl	8003f78 <osDelay>
	  send_deftask3();
 8005680:	e7f8      	b.n	8005674 <Task3_init+0x8>
	...

08005684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005696:	f7fa ff2f 	bl	80004f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40012c00 	.word	0x40012c00

080056a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80056ac:	b672      	cpsid	i
}
 80056ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056b0:	e7fe      	b.n	80056b0 <Error_Handler+0x8>
	...

080056b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_MspInit+0x4c>)
 80056bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056be:	4a10      	ldr	r2, [pc, #64]	; (8005700 <HAL_MspInit+0x4c>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6613      	str	r3, [r2, #96]	; 0x60
 80056c6:	4b0e      	ldr	r3, [pc, #56]	; (8005700 <HAL_MspInit+0x4c>)
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_MspInit+0x4c>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <HAL_MspInit+0x4c>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6593      	str	r3, [r2, #88]	; 0x58
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <HAL_MspInit+0x4c>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056ea:	2200      	movs	r2, #0
 80056ec:	210f      	movs	r1, #15
 80056ee:	f06f 0001 	mvn.w	r0, #1
 80056f2:	f7fa ffd9 	bl	80006a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000

08005704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b0ac      	sub	sp, #176	; 0xb0
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800570c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800571c:	f107 0314 	add.w	r3, r7, #20
 8005720:	2288      	movs	r2, #136	; 0x88
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f983 	bl	8005a30 <memset>
  if(huart->Instance==USART1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <HAL_UART_MspInit+0xc4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d144      	bne.n	80057be <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005734:	2301      	movs	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005738:	2300      	movs	r3, #0
 800573a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800573c:	f107 0314 	add.w	r3, r7, #20
 8005740:	4618      	mov	r0, r3
 8005742:	f7fc f8cb 	bl	80018dc <HAL_RCCEx_PeriphCLKConfig>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800574c:	f7ff ffac 	bl	80056a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_UART_MspInit+0xc8>)
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_UART_MspInit+0xc8>)
 8005756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800575a:	6613      	str	r3, [r2, #96]	; 0x60
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <HAL_UART_MspInit+0xc8>)
 800575e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005768:	4b18      	ldr	r3, [pc, #96]	; (80057cc <HAL_UART_MspInit+0xc8>)
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	4a17      	ldr	r2, [pc, #92]	; (80057cc <HAL_UART_MspInit+0xc8>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005774:	4b15      	ldr	r3, [pc, #84]	; (80057cc <HAL_UART_MspInit+0xc8>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005780:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005788:	2302      	movs	r3, #2
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005794:	2303      	movs	r3, #3
 8005796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800579a:	2307      	movs	r3, #7
 800579c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80057a4:	4619      	mov	r1, r3
 80057a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057aa:	f7fb f827 	bl	80007fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	2105      	movs	r1, #5
 80057b2:	2025      	movs	r0, #37	; 0x25
 80057b4:	f7fa ff78 	bl	80006a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057b8:	2025      	movs	r0, #37	; 0x25
 80057ba:	f7fa ff91 	bl	80006e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80057be:	bf00      	nop
 80057c0:	37b0      	adds	r7, #176	; 0xb0
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40013800 	.word	0x40013800
 80057cc:	40021000 	.word	0x40021000

080057d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	; 0x30
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80057de:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <HAL_InitTick+0xc8>)
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	4a2d      	ldr	r2, [pc, #180]	; (8005898 <HAL_InitTick+0xc8>)
 80057e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057e8:	6613      	str	r3, [r2, #96]	; 0x60
 80057ea:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <HAL_InitTick+0xc8>)
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057f6:	f107 020c 	add.w	r2, r7, #12
 80057fa:	f107 0310 	add.w	r3, r7, #16
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f7fb ffd9 	bl	80017b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005806:	f7fb ffc1 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 800580a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <HAL_InitTick+0xcc>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	0c9b      	lsrs	r3, r3, #18
 8005816:	3b01      	subs	r3, #1
 8005818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <HAL_InitTick+0xd0>)
 800581c:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_InitTick+0xd4>)
 800581e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005820:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <HAL_InitTick+0xd0>)
 8005822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005826:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_InitTick+0xd0>)
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800582e:	4b1c      	ldr	r3, [pc, #112]	; (80058a0 <HAL_InitTick+0xd0>)
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <HAL_InitTick+0xd0>)
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_InitTick+0xd0>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005840:	4817      	ldr	r0, [pc, #92]	; (80058a0 <HAL_InitTick+0xd0>)
 8005842:	f7fc fd07 	bl	8002254 <HAL_TIM_Base_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800584c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11b      	bne.n	800588c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005854:	4812      	ldr	r0, [pc, #72]	; (80058a0 <HAL_InitTick+0xd0>)
 8005856:	f7fc fd5f 	bl	8002318 <HAL_TIM_Base_Start_IT>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005864:	2b00      	cmp	r3, #0
 8005866:	d111      	bne.n	800588c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005868:	2019      	movs	r0, #25
 800586a:	f7fa ff39 	bl	80006e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d808      	bhi.n	8005886 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005874:	2200      	movs	r2, #0
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	2019      	movs	r0, #25
 800587a:	f7fa ff15 	bl	80006a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <HAL_InitTick+0xd8>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e002      	b.n	800588c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800588c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005890:	4618      	mov	r0, r3
 8005892:	3730      	adds	r7, #48	; 0x30
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000
 800589c:	431bde83 	.word	0x431bde83
 80058a0:	20001028 	.word	0x20001028
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	20000000 	.word	0x20000000

080058ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058b0:	e7fe      	b.n	80058b0 <NMI_Handler+0x4>

080058b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058b2:	b480      	push	{r7}
 80058b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058b6:	e7fe      	b.n	80058b6 <HardFault_Handler+0x4>

080058b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058bc:	e7fe      	b.n	80058bc <MemManage_Handler+0x4>

080058be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058be:	b480      	push	{r7}
 80058c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058c2:	e7fe      	b.n	80058c2 <BusFault_Handler+0x4>

080058c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058c8:	e7fe      	b.n	80058c8 <UsageFault_Handler+0x4>

080058ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058ca:	b480      	push	{r7}
 80058cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058ce:	bf00      	nop
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058dc:	4802      	ldr	r0, [pc, #8]	; (80058e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80058de:	f7fc fd8b 	bl	80023f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20001028 	.word	0x20001028

080058ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <USART1_IRQHandler+0x70>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d125      	bne.n	800594c <USART1_IRQHandler+0x60>
				{
			      // Read received byte
		uint8_t receivedByte = (uint8_t)(huart1.Instance->RDR);
 8005900:	4b16      	ldr	r3, [pc, #88]	; (800595c <USART1_IRQHandler+0x70>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005906:	b29b      	uxth	r3, r3
 8005908:	71fb      	strb	r3, [r7, #7]
			       // Store received byte in buffer
				   RxData[rxIndex++] = receivedByte;
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <USART1_IRQHandler+0x74>)
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	b291      	uxth	r1, r2
 8005914:	4a12      	ldr	r2, [pc, #72]	; (8005960 <USART1_IRQHandler+0x74>)
 8005916:	8011      	strh	r1, [r2, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	4a12      	ldr	r2, [pc, #72]	; (8005964 <USART1_IRQHandler+0x78>)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	5453      	strb	r3, [r2, r1]
				   if (rxIndex == 8)
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <USART1_IRQHandler+0x74>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b08      	cmp	r3, #8
 8005928:	d110      	bne.n	800594c <USART1_IRQHandler+0x60>
				       {

					   ECU1_flag = 1;
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <USART1_IRQHandler+0x7c>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
					   memcpy(ECU1_data, RxData, 8);
 8005930:	4b0e      	ldr	r3, [pc, #56]	; (800596c <USART1_IRQHandler+0x80>)
 8005932:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <USART1_IRQHandler+0x78>)
 8005934:	6811      	ldr	r1, [r2, #0]
 8005936:	6852      	ldr	r2, [r2, #4]
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	605a      	str	r2, [r3, #4]
					   memset(RxData, 0, sizeof(RxData));
 800593c:	2208      	movs	r2, #8
 800593e:	2100      	movs	r1, #0
 8005940:	4808      	ldr	r0, [pc, #32]	; (8005964 <USART1_IRQHandler+0x78>)
 8005942:	f000 f875 	bl	8005a30 <memset>
					   rxIndex = 0;
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <USART1_IRQHandler+0x74>)
 8005948:	2200      	movs	r2, #0
 800594a:	801a      	strh	r2, [r3, #0]


				       }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <USART1_IRQHandler+0x70>)
 800594e:	f7fd f88b 	bl	8002a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000fa0 	.word	0x20000fa0
 8005960:	20000f8c 	.word	0x20000f8c
 8005964:	2000107c 	.word	0x2000107c
 8005968:	20000f9c 	.word	0x20000f9c
 800596c:	20001074 	.word	0x20001074

08005970 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <SystemInit+0x20>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	4a05      	ldr	r2, [pc, #20]	; (8005990 <SystemInit+0x20>)
 800597c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005998:	f7ff ffea 	bl	8005970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800599c:	480c      	ldr	r0, [pc, #48]	; (80059d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800599e:	490d      	ldr	r1, [pc, #52]	; (80059d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059a0:	4a0d      	ldr	r2, [pc, #52]	; (80059d8 <LoopForever+0xe>)
  movs r3, #0
 80059a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059a4:	e002      	b.n	80059ac <LoopCopyDataInit>

080059a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059aa:	3304      	adds	r3, #4

080059ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059b0:	d3f9      	bcc.n	80059a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80059b4:	4c0a      	ldr	r4, [pc, #40]	; (80059e0 <LoopForever+0x16>)
  movs r3, #0
 80059b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059b8:	e001      	b.n	80059be <LoopFillZerobss>

080059ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059bc:	3204      	adds	r2, #4

080059be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059c0:	d3fb      	bcc.n	80059ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059c2:	f000 f811 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059c6:	f7ff fd03 	bl	80053d0 <main>

080059ca <LoopForever>:

LoopForever:
    b LoopForever
 80059ca:	e7fe      	b.n	80059ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80059cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80059d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80059d8:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 80059dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80059e0:	20001084 	.word	0x20001084

080059e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059e4:	e7fe      	b.n	80059e4 <ADC1_2_IRQHandler>
	...

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f820 	bl	8005a40 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005b38 	.word	0x08005b38
 8005a24:	08005b38 	.word	0x08005b38
 8005a28:	08005b38 	.word	0x08005b38
 8005a2c:	08005b3c 	.word	0x08005b3c

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <_init>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr

08005a4c <_fini>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr
